<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>WEB前端两三点</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://liangsandian.com/"/>
  <updated>2017-11-14T08:46:22.000Z</updated>
  <id>https://liangsandian.com/</id>
  
  <author>
    <name>aleafo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Gulp在前端开发中的简单应用</title>
    <link href="https://liangsandian.com/a/gulp-simple.html"/>
    <id>https://liangsandian.com/a/gulp-simple.html</id>
    <published>2017-11-14T08:46:07.000Z</published>
    <updated>2017-11-14T08:46:22.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>近几年，前端构建工具，自动化开发工具层出不穷，原来需要手工搭建的东西，一点点的全都被自动化工具代替，前端开发越来越倾向于只关注业务层面的东西，而不需要去做更多繁琐的工作了。</p><p>发展历程其实可以简单归纳为： 自动化工具 Grunt -&gt; Gulp -&gt; Webpack，在依赖加载方面，前有AMD标准的RequireJs，国内CMD标准的 SeaJs，然而，随着ES6规范的到来，这些依赖加载模块也终将被渐渐埋葬，取而代之的是babel等遵循ES6语法的新生事物。</p><p>在一些中小型的项目中，使用基于内容流的Gulp 还是可以大大提高开发效率的，配合git的自动部署将会成为中小型项目敏捷开发的利器。本文主要介绍Gulp在前端开发中的几个简单应用，适合入门学习和练习。</p><h2 id="Gulp搭建过程"><a href="#Gulp搭建过程" class="headerlink" title="Gulp搭建过程"></a>Gulp搭建过程</h2><h3 id="前情提要及说明"><a href="#前情提要及说明" class="headerlink" title="前情提要及说明"></a>前情提要及说明</h3><p>本例以windows开发环境下为例，项目目录为Thinkphp3.1搭建。<br>本例中的项目目录结构如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Webroot</span><br><span class="line">    -App</span><br><span class="line">        -Lib</span><br><span class="line">        -Conf</span><br><span class="line">        -Lang</span><br><span class="line">        -Tpl</span><br><span class="line">            -Public</span><br><span class="line">                +Js</span><br><span class="line">                +Css</span><br><span class="line">            -Src</span><br><span class="line">                +Js</span><br><span class="line">                +Css</span><br><span class="line">    -Common</span><br><span class="line">    -Conf</span><br><span class="line">    -Lib</span><br><span class="line">    -...</span><br></pre></td></tr></table></figure></p><p>我们需要将Src下的Js 和 Css文件进行自动部署并发布到Pulic目录下。</p><h3 id="要实现的功能"><a href="#要实现的功能" class="headerlink" title="要实现的功能"></a>要实现的功能</h3><p>实现的主要功能如下：</p><ul><li>对项目中的sass文件进行自动转换为css并压缩为最小化并复制到发布目录</li><li>复制没有使用sass的css文件到发布目录</li><li>对项目中的js文件进行自动转换并压缩为最小化并复制到发布目录</li></ul><h3 id="Gulp环境搭建"><a href="#Gulp环境搭建" class="headerlink" title="Gulp环境搭建"></a>Gulp环境搭建</h3><h4 id="安装node"><a href="#安装node" class="headerlink" title="安装node"></a>安装node</h4><p>首先Gulp的运行依赖nodejs，因此需要先安装nodejs， <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="external">点此下载nodejs安装包</a>，选择自己操作系统对应的版本下载即可。下载完成后一路下一步完成安装。</p><h4 id="初始化npm配置文件"><a href="#初始化npm配置文件" class="headerlink" title="初始化npm配置文件"></a>初始化npm配置文件</h4><p>nodejs安装完成后会自动带有npm模块，此时便可以在命令行下使用npm进行安装各种依赖的插件了，在此之前我们要先初始化一个npm配置文件。</p><ul><li>打开项目对应的目录，在项目根目录，按住Shift，点击鼠标右键，在此处打开命令窗口。</li><li><p>我们需要先初始化一个npm的项目依赖配置文件，用来保存该项目依赖的插件名称和版本，方便更换机器或者多人之间协作开发可以快速部署gulp的依赖环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm init</span><br></pre></td></tr></table></figure></li><li><p>根据要求输入名称等一些基本信息（其中名称和版本为必填，其他项目可以直接回车确认）</p></li><li>初始化完成之后，在根目录即可看到自动生成了一个 package.json的文件，该文件即为保存项目的插件依赖的配置文件。<br>-<h4 id="安装gulp"><a href="#安装gulp" class="headerlink" title="安装gulp"></a>安装gulp</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g gulp --save-dev</span><br></pre></td></tr></table></figure></li></ul><p>-g代表全局安装，-save-dev 代表将本次安装的插件信息保存到 package.json 中的devDependencies中，方便后续的使用。</p><h4 id="安装需要的插件"><a href="#安装需要的插件" class="headerlink" title="安装需要的插件"></a>安装需要的插件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install gulp-uglify --save-dev</span><br><span class="line">npm install ulp-minify-css --save-dev</span><br><span class="line">npm install gulp-sass --save-dev</span><br></pre></td></tr></table></figure><p>全部安装完成后即可进入下一步了。但是在我们大天朝，经常会出现有些时候安装失败的情况。其实也早有解决方案，就是使用淘宝的npm镜像</p><h4 id="使用taobao的npm镜像来安装"><a href="#使用taobao的npm镜像来安装" class="headerlink" title="使用taobao的npm镜像来安装"></a>使用taobao的npm镜像来安装</h4><p>具体方法就是先安装一个插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure></p><p>安装完成后，即可使用cnpm命令代替npm命令来进行安装了，这样就会从淘宝的服务器进行安装，速度嗖嗖的。</p><p>好了，安装完需要的插件，即可进行配置了。</p><h2 id="Gulp-配置"><a href="#Gulp-配置" class="headerlink" title="Gulp 配置"></a>Gulp 配置</h2><p>上面一大堆内容都是如何把gulp搭建起来，如何配置才能生成需要的功能呢。网上有很多gulp的教程，这里根据代码一行一行的注释看即可。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//引入需要的js包，也就是我们上面安装的依赖插件，并复制给变量</span></span><br><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">'gulp'</span>),</span><br><span class="line">    ugjs = <span class="built_in">require</span>(<span class="string">'gulp-uglify'</span>),</span><br><span class="line">    minicss = <span class="built_in">require</span>(<span class="string">'gulp-minify-css'</span>),</span><br><span class="line">    sass = <span class="built_in">require</span>(<span class="string">'gulp-sass'</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 制作一个gulp命令sassfile用来将对应目录下的scss文件转换为css并压缩为最小化的css</span></span><br><span class="line"><span class="comment">// 最后复制到目标目录中，在根目录新建文件，命名为gulpfile.js 并输入以下代码保存</span></span><br><span class="line">gulp.task(<span class="string">'sassfile'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'A/Tpl/Src/Css/*.scss'</span>)</span><br><span class="line">        .pipe(sass())</span><br><span class="line">        .pipe(minicss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'A/Tpl/Public/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩css文件并复制到目标目录中</span></span><br><span class="line">gulp.task(<span class="string">'minicss'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'A/Tpl/Src/Css/*.css'</span>)</span><br><span class="line">        .pipe(minicss())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'A/Tpl/Public/css'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//压缩js文件并复制到目标目录中</span></span><br><span class="line">gulp.task(<span class="string">'ugjs'</span>,<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    gulp.src(<span class="string">'A/Tpl/Src/js/*.js'</span>)</span><br><span class="line">        .pipe(ugjs())</span><br><span class="line">        .pipe(gulp.dest(<span class="string">'A/Tpl/Public/js'</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置build命令，组合执行以上三条命令</span></span><br><span class="line">gulp.task(<span class="string">'build'</span>,[<span class="string">'ugjs'</span>,<span class="string">'sassfile'</span>,<span class="string">'minicss'</span>]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置kw命令，用来让gulp监听对应文件的变动，一旦发现变动立即执行对应任务</span></span><br><span class="line">gulp.task(<span class="string">'kw'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    gulp.watch(<span class="string">'A/Tpl/Src/Css/*.scss'</span>,[<span class="string">'sassfile'</span>]);</span><br><span class="line">    gulp.watch(<span class="string">'A/Tpl/Src/Css/*.css'</span>,[<span class="string">'minicss'</span>]);</span><br><span class="line">    gulp.watch(<span class="string">'A/Tpl/Src/Js/*.js'</span>,[<span class="string">'ugjs'</span>]);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>经过以上的编写后，在命令行输入<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp build</span><br></pre></td></tr></table></figure></p><p>即可自动执行sass编译并压缩，输出、css压缩输出、js压缩输出命令<br>如果不想每次修改后都要运行一下这个命令，那就启动监听<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gulp kw</span><br></pre></td></tr></table></figure></p><p>这样，每次当你对所有被监听的文件作出修改，并执行保存动作都时候就会触发对应的编译指令，是不是很酷。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;近几年，前端构建工具，自动化开发工具层出不穷，原来需要手工搭建的东西，一点点的全都被自动化工具代替，前端开发越来越倾向于只关注业务层面的东西
      
    
    </summary>
    
      <category term="TOOLS" scheme="https://liangsandian.com/categories/tools/"/>
    
    
      <category term="gulp" scheme="https://liangsandian.com/tags/gulp/"/>
    
  </entry>
  
  <entry>
    <title>微信iOS浏览器 单页应用（SPA) jssdk失效的bug</title>
    <link href="https://liangsandian.com/a/weixin-landing-page-bug.html"/>
    <id>https://liangsandian.com/a/weixin-landing-page-bug.html</id>
    <published>2017-11-14T08:40:36.000Z</published>
    <updated>2017-11-14T09:54:30.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在vue的spa开发中使用到 jssdk， 遇到了不少坑。 总算填上了吧。下面说说一些jssdk 签名失败的问题，以及微信的签名分享的一些说明你。</p><h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>环境：iphone<br>开发： vue-cli  hash模式<br>直接从连接点击进入页面，jssdk调用成功。 如果先进入其他页面，再点击进入则提示 signatrue: failed。 </p><p>其实也就是： iphone下，jssdk的调用只对 landingPage 有效，对通过spa跳转的URL 是无效的。举个例子：</p><p>微信直接通过链接或者菜单访问 aa.com/a/,此时的landingPage 为aa.com/a/.</p><p>然后通过该页跳转到  aa.com/b/， 在b页面进行jssdk调用的时候，微信会认为当前的URL仍然是a，也就是a仍然是landingPage，此时将location.href作为jssdk请求的URL发送，会出现signatrue失败的提示。</p><p>但是，如果直接通过链接或者菜单访问 aa.com/b/ 就会成功。 此时的landingPage 就变成了 aa.com/b/</p><p>而在安卓下则规则正常。也就是当前URL是啥微信就会怎么判断。 不管是直接点进来还是通过landingPage进行跳转。</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>其实上面的原理 也是根据测试进行反推的。 既然知道了原理，就有了解决的办法。</p><p>在router.afterEach() 中，判断如果为ios设备则去取 sessionStroage中的landingPage，若为空则说明当前页面即为landingPage，保存该url。<br>然后在需要调用jssdk的地方，判断若为ios设备，则取sessionStroage的值，否则取location.href</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">//从其他页面进入列表页</span></span><br><span class="line">router.afterEach(<span class="function">(<span class="params">to, <span class="keyword">from</span>, next</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="comment">//判断是否为着陆页</span></span><br><span class="line">  <span class="keyword">if</span> ( navigator.userAgent.toLowerCase().indexOf(<span class="string">'iphone'</span>) !== <span class="number">-1</span>  &amp;&amp; !sessionStorage.getItem(<span class="string">'landingUrl'</span>))&#123;</span><br><span class="line">      sessionStorage.setItem(<span class="string">'landingUrl'</span>, location.href);</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//然后再需要调用jssdk初始化的位置对url赋值</span></span><br><span class="line"><span class="keyword">let</span> url = location.href;</span><br><span class="line"><span class="keyword">if</span> (navigator.userAgent.toLowerCase().indexOf(<span class="string">'iphone'</span>) !== <span class="number">-1</span>)&#123;</span><br><span class="line">  url = sessionStorage.landingUrl;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过以上方法即可实现 ios和安卓在 spa的hash模式下 兼容分享的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在vue的spa开发中使用到 jssdk， 遇到了不少坑。 总算填上了吧。下面说说一些jssdk 签名失败的问题，以及微信的签名分享的一些说明你。&lt;/p&gt;
&lt;h3 id=&quot;问题描述&quot;&gt;&lt;a href=&quot;#问题描述&quot; class=&quot;headerlink&quot; title=&quot;问
      
    
    </summary>
    
      <category term="JavaScript" scheme="https://liangsandian.com/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>vue + vue-router + mint 开发记录</title>
    <link href="https://liangsandian.com/a/vue-exp.html"/>
    <id>https://liangsandian.com/a/vue-exp.html</id>
    <published>2017-08-24T08:56:50.000Z</published>
    <updated>2017-11-14T08:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近公司的项目正式开始使用 vue 的 cli脚手架进行开发。 开发过程中踩的一些坑，做一个简单的总结。</p><h2 id="文件保存目录方面"><a href="#文件保存目录方面" class="headerlink" title="文件保存目录方面"></a>文件保存目录方面</h2><p>弄清楚在webpack中的配置里面， /src/assets 是会由webpack自动编译后按照规则输出到/dist，而 /static则会原封不动的复制到 /dist</p><p>基于以上原因， 建议项目中的 sass文件、img文件都保存到assets下，对于img文件等的引用使用相对路径即可。<br>一些开发阶段的demo图片等资源可以存放在 /static 下，用于测试。</p><p>关于/src/assets/中的静态资源编译规则，可以参考这里：<a href="http://hq5544.github.io/vue-webpack/static.html" target="_blank" rel="external">http://hq5544.github.io/vue-webpack/static.html</a></p><h2 id="router-问题"><a href="#router-问题" class="headerlink" title="router 问题"></a>router 问题</h2><p>可以使用<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--方式一--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'enroll', query:&#123;id:1&#125;"</span>&gt;</span></span><br><span class="line"> <span class="comment">&lt;!--方式二--&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">:to</span>=<span class="string">"&#123;name: 'enroll', params:&#123;id:1&#125;&#125;"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>第一种方式，参数接收可以使用，地址栏的查询字符串接收。<br>而第二种方式，需要在路由中设置形如：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">path: path: <span class="string">'/detail/:id'</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>的方式，在目标页面，使用 this.$route.params.xxx 的方式接收参数。同时，地址栏的表现也会不一样。 第一种地址栏为查询字符串， 第二种为path中设置的格式。<br>特别的一点， 在提交表单等内容后，若用户点击返回按钮，不想让用户返回到之前的表单页，则可以使用 replace 代替，push，或者在router-link中 增加属性 replace</p><h2 id="关于infinite-scroll-记住位置的实现思路。"><a href="#关于infinite-scroll-记住位置的实现思路。" class="headerlink" title="关于infinite scroll 记住位置的实现思路。"></a>关于infinite scroll 记住位置的实现思路。</h2><p>在 router.beforeEach() 中将滚动位置写入localStorage（以页面名称为键名），然后再 router.afterEach() 中，读取并滚动到指定位置。 同时对无限滚动列表开启缓存。<br>注意： 若启用页面动画，则以上动作将失效。 可以将记住位置 以及 滚动到指定位置的功能放在动画的 回调事件中，达到同样的效果。</p><h2 id="关于配合服务端项目，将spa-放入子目录相关的问题"><a href="#关于配合服务端项目，将spa-放入子目录相关的问题" class="headerlink" title="关于配合服务端项目，将spa 放入子目录相关的问题"></a>关于配合服务端项目，将spa 放入子目录相关的问题</h2><p>路由使用传统的hash模式，问题较少，但是如果为了更美观的路径以及减少页面跳转参数的复杂度等方面考虑，改为 history模式，将会麻烦许多。 官方给了一个nginx配置的例子，只是针对根目录，实际使用中，一般是要放在子目录的，因此配置较为繁琐，如果理解不明的话，可能会浪费很多时间。下面说一下思路<br>主要配置参数都在 webpack部分， 来看 /config/index.js 中的几个参数：</p><ol><li>如果需要放在子目录的话，那么 build.assetsPublicPath 必须使用相对目录，即 ‘./‘ 这代表了，输出到dist文件中 assets的引用路径是相index.html的路径，而不是相对于根目录的路径。</li><li>在 /router/index.js 中，所有的路径要统一为服务器端设置的子目录路径，例如，服务器端的路径为 <a href="http://www.abc.com/path/to/dist/" target="_blank" rel="external">http://www.abc.com/path/to/dist/</a>  则路由index.js 中的路径也要统一为 /path/to/dist/router-name</li><li>在nginx 配置中，使用转发， 将对应目录下找不到的文件，统一转发到 dist/index.html 只有这样才能找到 vue的路由，从而找到对应视图（这一句很重要，配置不对就会导致打开后页面完全空白）。<br>下面是一个 nginx配置的示例：<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">        listen 80</span><br><span class="line"></span><br><span class="line">        root D:/Webs/path/to/dist;</span><br><span class="line"></span><br><span class="line">        index index.html;</span><br><span class="line"></span><br><span class="line">        server_name localhost;</span><br><span class="line"></span><br><span class="line">        location /your-sub-dir/ &#123;</span><br><span class="line">            try_files $uri $uri/ /index.html last;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ol><h2 id="关于使用vue-进行跨域请求的问题"><a href="#关于使用vue-进行跨域请求的问题" class="headerlink" title="关于使用vue 进行跨域请求的问题"></a>关于使用vue 进行跨域请求的问题</h2><p>其实跨域请求可以通过服务端增加 header allow-access-origion的方式将跨域请求的域添加进来，这样就可以使用axios请求同域一样的方式进行。 如果服务端设置有困难，那及建议的方式是引入 jsonp的 npm包。 具体的可以npm搜索jsonp 查看对应的参数。</p><h2 id="关于使用axios-传递表单类型数据的问题"><a href="#关于使用axios-传递表单类型数据的问题" class="headerlink" title="关于使用axios 传递表单类型数据的问题"></a>关于使用axios 传递表单类型数据的问题</h2><p>默认的axios发送给服务端的数据为 json类型，需要服务端以实体的形式才能接收到，例如php需要使用 php://input 才能接收到输入流，传统的 get post 无法取到。 如果有些情况下无法获取值，那可以将要发送的json格式通过qs转换为 querystring的方式，然后修改请求的headers，实现代码如下：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//先导入qs</span></span><br><span class="line"><span class="keyword">import</span> Qs <span class="keyword">from</span> <span class="string">'qs'</span></span><br><span class="line"><span class="comment">//在发送的时候修改头部信息。</span></span><br><span class="line">headers: &#123;</span><br><span class="line">    <span class="string">'Content-Type'</span>: <span class="string">'application/x-www-form-urlencoded; charset=UTF-8'</span></span><br><span class="line">&#125;,</span><br><span class="line">data: Qs.stringify(postData)</span><br></pre></td></tr></table></figure></p><h2 id="关于过渡动画和缓存-keepAlive-问题"><a href="#关于过渡动画和缓存-keepAlive-问题" class="headerlink" title="关于过渡动画和缓存(keepAlive)问题"></a>关于过渡动画和缓存(keepAlive)问题</h2><p>可以在过渡动画的回调事件中进行记住列表位置等操作。 如果是无限滚动的列表，可以通过keepAlive来取消重复加载数据的问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近公司的项目正式开始使用 vue 的 cli脚手架进行开发。 开发过程中踩的一些坑，做一个简单的总结。&lt;/p&gt;
&lt;h2 id=&quot;文件保存目录方面&quot;&gt;&lt;a href=&quot;#文件保存目录方面&quot; class=&quot;headerlink&quot; title=&quot;文件保存目录方面&quot;&gt;&lt;/a&gt;文件
      
    
    </summary>
    
      <category term="Javascript" scheme="https://liangsandian.com/categories/js/"/>
    
      <category term="vue" scheme="https://liangsandian.com/categories/js/vue/"/>
    
    
  </entry>
  
  <entry>
    <title>300ms/350ms点击延迟终于离去了</title>
    <link href="https://liangsandian.com/a/touch-delay-300ms.html"/>
    <id>https://liangsandian.com/a/touch-delay-300ms.html</id>
    <published>2017-07-12T02:47:42.000Z</published>
    <updated>2017-11-14T08:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>300ms延迟是安卓设备，350ms是iOS设备。 其实都是早期为了兼容PC端的网页，也能在移动端正常浏览，并使用了双击放大的功能。最早是由apple提出，然后其他各大厂商相继模仿。<br>这就导致了，为了监测是单击打开链接，还是双击放大网页，因此在点击后等待300ms再执行操作。这事放在早期的移动端互联网时代，大家并不觉得有什么不妥。但是随着移动端APP的发展，这种点击延迟就渐渐的让人无法忍受了，也许这就叫没有对比就没有伤害吧。</p><h2 id="早期解决"><a href="#早期解决" class="headerlink" title="早期解决"></a>早期解决</h2><p>后来，为了解决这个问题，xxx 组织写了个js框架，叫做 fastClick.js 然后很多移动端的js框架都整合了这货，例如 zepto 等。 </p><p>这里顺便提一下，fastClick的原理： 拦截touchStart事件，获取到touchEnd 的行为传给click并执行，再阻止touchEnd的行为，从而实现了无延迟的点击。</p><h2 id="然而，现在你已经不需要这货了"><a href="#然而，现在你已经不需要这货了" class="headerlink" title="然而，现在你已经不需要这货了"></a>然而，现在你已经不需要这货了</h2><p>当前版本的iOS Safari （9.1+） 以及 chrome （32+） 都已经可以通过设置如下头部属性解决<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span> <span class="attr">content</span>=<span class="string">"width=device-width"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><a href="https://developers.google.com/web/updates/2013/12/300ms-tap-delay-gone-away" target="_blank" rel="external">300ms tap delay, gone away</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot; class=&quot;headerlink&quot; title=&quot;由来&quot;&gt;&lt;/a&gt;由来&lt;/h2&gt;&lt;p&gt;300ms延迟是安卓设备，350ms是iOS设备。 其实都是早期为了兼容PC端的网页，也能在移动端正常浏览，并使用了双击放大的功能。最早是由
      
    
    </summary>
    
      <category term="js" scheme="https://liangsandian.com/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>搭建本地wamp https SSL 测试环境</title>
    <link href="https://liangsandian.com/a/local-ssl-env.html"/>
    <id>https://liangsandian.com/a/local-ssl-env.html</id>
    <published>2017-02-28T05:27:26.000Z</published>
    <updated>2017-11-14T08:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微信小程序，需要全站的数据均为https的传输协议。 </p><p>之前阿里云的ssl传输，直接使用的cdn 服务端生成的证书，其实是个非完全的加密（用户到 阿里云cdn 属于安全的ssl传输，cdn节点到阿里云自家服务器用的还是传统的传输协议）</p><p>但是，证书申请和配置都非常方便，而且安全性也足够，关键是免费！</p><p>但是本地开发的时候，测试就比较烦恼了。 如果提供了 appid 之后的小程序测试环境，需要读取配置中的可信域名作为数据来源的可信域名测试环境。 因此，就需要配置一个本地的https环境用于开发测试。</p><p>原理其实就是自己给自己颁发一个证书，然后信任自己 ^_^</p><h2 id="配置本地SSL环境流程大致如下"><a href="#配置本地SSL环境流程大致如下" class="headerlink" title="配置本地SSL环境流程大致如下"></a>配置本地SSL环境流程大致如下</h2><ul><li><ol><li>使用openSSL 生成证书（证书中包含域名和来源者的身份信息）；</li></ol></li><li><ol><li>服务端开启对SSL的支持模块</li></ol></li><li><ol><li>服务端配置文件修改映射域名端口和证书路径</li></ol></li><li><ol><li>系统hosts配置文件修改端口（实际这个端口可以不用加，但是加和不加是有区别的）并重启服务。</li></ol></li></ul><h2 id="详细操作流程如下"><a href="#详细操作流程如下" class="headerlink" title="详细操作流程如下"></a>详细操作流程如下</h2><h3 id="1-生成证书"><a href="#1-生成证书" class="headerlink" title="1. 生成证书"></a>1. 生成证书</h3><p>使用openSSL生成证书。 首先下载openSSL，然后生成证书。<br>openssl下载：链接: <a href="http://pan.baidu.com/s/1kUF7Vk7" target="_blank" rel="external">http://pan.baidu.com/s/1kUF7Vk7</a> 密码: 45b4<br>我们只需要公钥，私钥，和证书即可。<br>这里我们的开发环境为 wamp，因此可以直接使用apache自带的openssl 来生成证书。</p><ul><li>找到apache的conf目录， 在该目录下运行cmd（按住Ctrl右键 文件夹空白处），在此处运行cmd</li><li><p>生成server.key </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa 1024&gt;server.key</span><br></pre></td></tr></table></figure></li><li><p>生成server.csr</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -new -key server.key &gt; server.csr</span><br></pre></td></tr></table></figure><p>需要用户输入国家代码之类的信息，可以随便输入。 除了 Common Name 只能输入域名或IP，而且Common Name 必须和 httpd.conf 中 server name 必须一致， 否则 apache 不能启动</p></li><li>生成server.crt <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl req -x509 -days 365 -key server.key -in server.csr &gt; server.crt</span><br></pre></td></tr></table></figure></li></ul><h3 id="2-以wamp环境为例，修改服务端配置"><a href="#2-以wamp环境为例，修改服务端配置" class="headerlink" title="2. 以wamp环境为例，修改服务端配置"></a>2. 以wamp环境为例，修改服务端配置</h3><ul><li>配置：httpd.conf，取消注释： <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Include conf/extra/httpd-ssl.conf </span><br><span class="line">LoadModule ssl_module modules/mod_ssl.so</span><br></pre></td></tr></table></figure></li></ul><p>注意这里的”httpd-ssl.conf “ 文件中，默认有一个主机配置，如果需要使用，请修改对应的网站根目录路径和apache路径，否则会导致apache启动失败。 这里我们建议使用包含vhosts文件的形式。</p><ul><li><p>配置vhosts文件，端口改为443，然后在对应的vhosts文件中增加证书和服务器公钥文件路径。其中 C:/wamp/bin/apache/apache2.4.9/ 替换为apache路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">SSLEngine on</span><br><span class="line">SSLCertificateFile &quot;C:/wamp/bin/apache/apache2.4.9/conf/server.crt&quot;</span><br><span class="line">SSLCertificateKeyFile &quot;C:/wamp/bin/apache/apache2.4.9/conf/server.key&quot;</span><br></pre></td></tr></table></figure></li><li><p>重启apache，如果出现无法启动的情况，请检查apache路径。</p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;微信小程序，需要全站的数据均为https的传输协议。 &lt;/p&gt;
&lt;p&gt;之前阿里云的ssl传输，直接使用的cdn 服务端生成的证书，其实是个非
      
    
    </summary>
    
      <category term="php" scheme="https://liangsandian.com/categories/php/"/>
    
    
  </entry>
  
  <entry>
    <title>前端面试题</title>
    <link href="https://liangsandian.com/a/front-end-interview.html"/>
    <id>https://liangsandian.com/a/front-end-interview.html</id>
    <published>2017-01-04T02:38:36.000Z</published>
    <updated>2017-11-14T08:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS部分"><a href="#CSS部分" class="headerlink" title="CSS部分"></a>CSS部分</h2><p>说明： 按照难易程度 见到到困难依次为 1-5， 答案仅供参考。</p><h3 id="1-如何清除浮动-1"><a href="#1-如何清除浮动-1" class="headerlink" title="1. 如何清除浮动 1"></a>1. 如何清除浮动 1</h3><p>答案：</p><ul><li>父元素定义 overflow:hidden;</li><li>使用 :after 伪类或新增一个div 设置 content 及 clear:both</li></ul><h3 id="2-margin-bottom-对默认样式的span-是否起作用，为什么？-3"><a href="#2-margin-bottom-对默认样式的span-是否起作用，为什么？-3" class="headerlink" title="2. margin-bottom 对默认样式的span 是否起作用，为什么？ 3"></a>2. margin-bottom 对默认样式的span 是否起作用，为什么？ 3</h3><p>答案： margin在竖直方向上 等对inline元素不起作用，因为inline元素默认没有宽高属性。</p><h3 id="3-padding-left-对默认的span-元素是否起作用，-padding-bottom呢？-3"><a href="#3-padding-left-对默认的span-元素是否起作用，-padding-bottom呢？-3" class="headerlink" title="3. padding-left 对默认的span 元素是否起作用， padding-bottom呢？ 3"></a>3. padding-left 对默认的span 元素是否起作用， padding-bottom呢？ 3</h3><p>答案： padding-left 有效， 而 padding-bottom 无效，因为inline元素没有宽高属性。</p><h3 id="4-简单解释一下-font-size-10rem-中-rem-的作用-好处？-3"><a href="#4-简单解释一下-font-size-10rem-中-rem-的作用-好处？-3" class="headerlink" title="4. 简单解释一下 font-size: 10rem 中 rem 的作用/好处？ 3"></a>4. 简单解释一下 font-size: 10rem 中 rem 的作用/好处？ 3</h3><p>参考答案： 可以根据root元素大小来 自适应 改变字体大小。方便全站统一调整尺寸。</p><h3 id="5-使用css选择器选择-被选中的-checkbox-类型的按钮-3"><a href="#5-使用css选择器选择-被选中的-checkbox-类型的按钮-3" class="headerlink" title="5.  使用css选择器选择 被选中的 checkbox 类型的按钮 3"></a>5.  使用css选择器选择 被选中的 checkbox 类型的按钮 3</h3><p>答案： [type=checkbox]:checked</p><h3 id="6-使用伪类，编写一个样式，实现每行4个li元素中的最后一个元素右外边距为0-2"><a href="#6-使用伪类，编写一个样式，实现每行4个li元素中的最后一个元素右外边距为0-2" class="headerlink" title="6. 使用伪类，编写一个样式，实现每行4个li元素中的最后一个元素右外边距为0 2"></a>6. 使用伪类，编写一个样式，实现每行4个li元素中的最后一个元素右外边距为0 2</h3><p>答案： li:nth-child(4n+4){margin-right:0;}</p><h3 id="7-display-和-visibility的区别-2"><a href="#7-display-和-visibility的区别-2" class="headerlink" title="7. display 和 visibility的区别 2"></a>7. display 和 visibility的区别 2</h3><p>  display: none 相当于 remove dom.  而 visibility: hidden 相当于 hide dom.</p><h3 id="8-了解哪些浏览器内核？-2"><a href="#8-了解哪些浏览器内核？-2" class="headerlink" title="8. 了解哪些浏览器内核？ 2"></a>8. 了解哪些浏览器内核？ 2</h3><p>参考答案： IE 火狐（Gecko） webkit opera（Presto）</p><h3 id="9-title-与-alt-的应用场景-2"><a href="#9-title-与-alt-的应用场景-2" class="headerlink" title="9. title 与 alt 的应用场景 2"></a>9. title 与 alt 的应用场景 2</h3><p>参考答案： title 一般用于提示超链接等， alt用户图片，且为标准设计中的必填属性</p><h3 id="10-如何理解html标签语义化-3"><a href="#10-如何理解html标签语义化-3" class="headerlink" title="10. 如何理解html标签语义化 3"></a>10. 如何理解html标签语义化 3</h3><h3 id="11-CSS的几种标签选择器的优先级是如何排列的-2"><a href="#11-CSS的几种标签选择器的优先级是如何排列的-2" class="headerlink" title="11. CSS的几种标签选择器的优先级是如何排列的 2"></a>11. CSS的几种标签选择器的优先级是如何排列的 2</h3><p> important  行内 id  class tagName</p><h3 id="12-相邻选择器如何表示？-3"><a href="#12-相邻选择器如何表示？-3" class="headerlink" title="12. 相邻选择器如何表示？ 3"></a>12. 相邻选择器如何表示？ 3</h3><ul><li>或 ~</li></ul><h3 id="13。-子选择器如何表示？-2"><a href="#13。-子选择器如何表示？-2" class="headerlink" title="13。 子选择器如何表示？ 2"></a>13。 子选择器如何表示？ 2</h3><p>  大于号或空格</p><h3 id="14-垂直居中的方法？-3"><a href="#14-垂直居中的方法？-3" class="headerlink" title="14. 垂直居中的方法？ 3"></a>14. 垂直居中的方法？ 3</h3><p>参考答案：</p><h3 id="15-了解哪些前端框架-2"><a href="#15-了解哪些前端框架-2" class="headerlink" title="15. 了解哪些前端框架 2"></a>15. 了解哪些前端框架 2</h3><p>参考答案：bootstrap  easyUI jquery angular vue react  等</p><h3 id="16-IE8-的hack-怎么写-2"><a href="#16-IE8-的hack-怎么写-2" class="headerlink" title="16.  IE8 的hack 怎么写 2"></a>16.  IE8 的hack 怎么写 2</h3><p>参考 color: #66ffcc\9;</p><h3 id="17-absolute-定位的元素-是相对于什么元素进行定位-2"><a href="#17-absolute-定位的元素-是相对于什么元素进行定位-2" class="headerlink" title="17.  absolute 定位的元素 是相对于什么元素进行定位 2"></a>17.  absolute 定位的元素 是相对于什么元素进行定位 2</h3><p>参考答案： 所有的父元素中最近的 非static定位的元素</p><h3 id="18-设置为-visibility-hidden的-img-标签元素，会触发http请求吗？-2"><a href="#18-设置为-visibility-hidden的-img-标签元素，会触发http请求吗？-2" class="headerlink" title="18. 设置为 visibility: hidden的 img 标签元素，会触发http请求吗？ 2"></a>18. 设置为 visibility: hidden的 img 标签元素，会触发http请求吗？ 2</h3><p>答案： 会。</p><h3 id="19-左右结构的网页布局中，左侧为侧边栏，右侧为正文，如何才能先显示出正文，再显示出侧边栏？-3"><a href="#19-左右结构的网页布局中，左侧为侧边栏，右侧为正文，如何才能先显示出正文，再显示出侧边栏？-3" class="headerlink" title="19. 左右结构的网页布局中，左侧为侧边栏，右侧为正文，如何才能先显示出正文，再显示出侧边栏？ 3"></a>19. 左右结构的网页布局中，左侧为侧边栏，右侧为正文，如何才能先显示出正文，再显示出侧边栏？ 3</h3><p>答案： 在html结构中，先写正文部分，再写侧边栏部分，通过css控制样式即可。因为html结构是自上而下渲染的。</p><h3 id="20-使用字体图标的优点。2"><a href="#20-使用字体图标的优点。2" class="headerlink" title="20. 使用字体图标的优点。2"></a>20. 使用字体图标的优点。2</h3><p>参考答案：</p><ul><li>① 可以自定义图标颜色；</li><li>② 自定义图标尺寸；</li><li>③ 减少图片带来的http请求</li><li>④ 兼容性好（png24在低版本IE中出现灰色背景）</li></ul><h3 id="21-cookies-locaStorage-sessionStorage-区别-2"><a href="#21-cookies-locaStorage-sessionStorage-区别-2" class="headerlink" title="21. cookies  locaStorage sessionStorage 区别 2"></a>21. cookies  locaStorage sessionStorage 区别 2</h3><p>参考答案：</p><ul><li>相同点： 都可以用来存储浏览器客户的数据；</li><li>不同点： cookies 可以用来保存的数据长度有限。 sessionStorage 保存的数据在会话结束后自动清除。localStorage则不会<h3 id="22-script标签通常都放在html页面的什么位置最佳。-2"><a href="#22-script标签通常都放在html页面的什么位置最佳。-2" class="headerlink" title="22. script标签通常都放在html页面的什么位置最佳。 2"></a>22. script标签通常都放在html页面的什么位置最佳。 2</h3>答案： body之前</li></ul><h3 id="23-box-sizing-border-box-属性是什么意思？-2"><a href="#23-box-sizing-border-box-属性是什么意思？-2" class="headerlink" title="23. box-sizing: border-box 属性是什么意思？ 2"></a>23. box-sizing: border-box 属性是什么意思？ 2</h3><p>答案： 计算dom宽高的时候将border和padding一并计算为 宽和高。</p><h3 id="24-transform-translateX-10px-的作用是什么？-2"><a href="#24-transform-translateX-10px-的作用是什么？-2" class="headerlink" title="24. transform: translateX(-10px) 的作用是什么？ 2"></a>24. transform: translateX(-10px) 的作用是什么？ 2</h3><p>答案： 将元素沿X轴，移动 -10px</p><h3 id="25-display-flex-是什么意思？-3"><a href="#25-display-flex-是什么意思？-3" class="headerlink" title="25. display: flex 是什么意思？ 3"></a>25. display: flex 是什么意思？ 3</h3><p>答案： 元素内的元素将以flex的布局方式排列。</p><h2 id="JS-部分"><a href="#JS-部分" class="headerlink" title="JS 部分"></a>JS 部分</h2><h3 id="1-var-foo-10-‘20’-输出结果-2"><a href="#1-var-foo-10-‘20’-输出结果-2" class="headerlink" title="1.  var foo = 10 +  ‘20’; 输出结果 2"></a>1.  var foo = 10 +  ‘20’; 输出结果 2</h3><p>答案： 1020</p><h3 id="2-window-document-document-输出结果-2"><a href="#2-window-document-document-输出结果-2" class="headerlink" title="2.  window.document === document 输出结果 2"></a>2.  window.document === document 输出结果 2</h3><p>答案： true</p><h3 id="3-js-获取元素的方法有哪些？-3"><a href="#3-js-获取元素的方法有哪些？-3" class="headerlink" title="3. js 获取元素的方法有哪些？ 3"></a>3. js 获取元素的方法有哪些？ 3</h3><p>答案：<br>getElementById getElementsByClassName  getElementsByTagName querySelector querySelectorAll</p><h3 id="4-题3中，最快的是哪一种？-2"><a href="#4-题3中，最快的是哪一种？-2" class="headerlink" title="4. 题3中，最快的是哪一种？ 2"></a>4. 题3中，最快的是哪一种？ 2</h3><p>答案 : getElementById</p><h3 id="5-如何获取整个页面的文本内容（不包含任何标签的文本）-2"><a href="#5-如何获取整个页面的文本内容（不包含任何标签的文本）-2" class="headerlink" title="5. 如何获取整个页面的文本内容（不包含任何标签的文本） 2"></a>5. 如何获取整个页面的文本内容（不包含任何标签的文本） 2</h3><p>答案： document.body.innerText;</p><h3 id="6-async-关键字用于script标签时，如果是内嵌的js，能否生效？-3"><a href="#6-async-关键字用于script标签时，如果是内嵌的js，能否生效？-3" class="headerlink" title="6. async 关键字用于script标签时，如果是内嵌的js，能否生效？ 3"></a>6. async 关键字用于script标签时，如果是内嵌的js，能否生效？ 3</h3><p>答案： 不能。 async 只对外链的js生效。</p><h3 id="7-简述一下事件冒泡过程。-4"><a href="#7-简述一下事件冒泡过程。-4" class="headerlink" title="7. 简述一下事件冒泡过程。 4"></a>7. 简述一下事件冒泡过程。 4</h3><p>答案： 例如 table&gt;tr&gt;td中点击td，将依次触发 td tr table body document的点击事件。</p><h3 id="8-编写给一个元素添加-类名的函数。-3"><a href="#8-编写给一个元素添加-类名的函数。-3" class="headerlink" title="8.  编写给一个元素添加 类名的函数。 3"></a>8.  编写给一个元素添加 类名的函数。 3</h3><p>参考答案：<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">addClass</span>(<span class="params">selector, className</span>)</span>&#123;</span><br><span class="line">   <span class="keyword">var</span> elm = <span class="built_in">document</span>.querySelector(selector);</span><br><span class="line">   <span class="keyword">if</span> (elm)&#123;</span><br><span class="line">      elm.classList.add(className);</span><br><span class="line">   &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="9-简述-null-和-undefined-的区别。-4"><a href="#9-简述-null-和-undefined-的区别。-4" class="headerlink" title="9. 简述 null 和 undefined 的区别。 4"></a>9. 简述 null 和 undefined 的区别。 4</h3><p>答案： undefined 意味着变量没有被定义。以下情形会返回undefined</p><ul><li>已定义但是未赋值的变量</li><li>没有任何返回值的函数或者片段</li><li>在对象中查找不存在的属性</li><li>是一个全局变量<br>null<br>空的或者不存在的值。<br>null ==  undefined</li></ul><h3 id="10-和-的区别-2"><a href="#10-和-的区别-2" class="headerlink" title="10. ==  和 === 的区别 2"></a>10. ==  和 === 的区别 2</h3><p>答案： === 除了对比值是否相等，还要对比类型是否相等，只有全部相等才会成立。</p><h3 id="11-举例说明-split-的用法-2"><a href="#11-举例说明-split-的用法-2" class="headerlink" title="11.  举例说明 split 的用法 2"></a>11.  举例说明 split 的用法 2</h3><p>参考：<br>var a = ‘1,2,3,5’;<br>console.log(a.split(‘,’));</p><h3 id="12-jQuery常用的一些优化性能的写法举例-3"><a href="#12-jQuery常用的一些优化性能的写法举例-3" class="headerlink" title="12.  jQuery常用的一些优化性能的写法举例 3"></a>12.  jQuery常用的一些优化性能的写法举例 3</h3><p>参考：</p><ul><li>缓存dom元素。 例如 var $dom = $(‘#parent-selector’);</li><li>使用for 循环 代替 for in 遍历数组。因为for in 遍历包含元素自身的属性。</li><li>尽量使用id查询</li><li>classed前面使用tags</li><li>链式写法</li><li>减少dom的操作。 例如，循环中先生成html，最后再操作dom</li></ul><h3 id="13-下面的代码片段输出结果是什么？-3"><a href="#13-下面的代码片段输出结果是什么？-3" class="headerlink" title="13. 下面的代码片段输出结果是什么？ 3"></a>13. 下面的代码片段输出结果是什么？ 3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = <span class="string">"Hello"</span>;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> bar = <span class="string">" World"</span>;</span><br><span class="line">  alert(foo + bar);</span><br><span class="line">&#125;)();</span><br><span class="line">alert(foo + bar);</span><br><span class="line">答案： Hello world !</span><br></pre></td></tr></table></figure><h3 id="14-下面代码运行结束后，foo-length-的结果是什么？-2"><a href="#14-下面代码运行结束后，foo-length-的结果是什么？-2" class="headerlink" title="14. 下面代码运行结束后，foo.length 的结果是什么？ 2"></a>14. 下面代码运行结束后，foo.length 的结果是什么？ 2</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = [];</span><br><span class="line">foo.push(<span class="number">1</span>);</span><br><span class="line">foo.push(<span class="number">2</span>);</span><br><span class="line">答案： <span class="number">2</span></span><br></pre></td></tr></table></figure><h3 id="15-下面代码运行结束后，-foo-x-的结果是什么？-3"><a href="#15-下面代码运行结束后，-foo-x-的结果是什么？-3" class="headerlink" title="15. 下面代码运行结束后， foo.x 的结果是什么？ 3"></a>15. 下面代码运行结束后， foo.x 的结果是什么？ 3</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> foo = &#123;<span class="attr">n</span>: <span class="number">1</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> bar = foo;</span><br><span class="line">foo.x = foo = &#123;<span class="attr">n</span>: <span class="number">2</span>&#125;;</span><br><span class="line">答案：  <span class="literal">undefined</span></span><br></pre></td></tr></table></figure><h3 id="16-什么是重绘-repaint-3"><a href="#16-什么是重绘-repaint-3" class="headerlink" title="16.  什么是重绘 repaint 3"></a>16.  什么是重绘 repaint 3</h3><p>答案： 元素外观改变，大小不变。</p><h3 id="17-什么事渲染-reflow-3"><a href="#17-什么事渲染-reflow-3" class="headerlink" title="17. 什么事渲染 reflow 3"></a>17. 什么事渲染 reflow 3</h3><p>答案：元素大小改变或增减元素。</p><h3 id="18-重绘和渲染的区别-是什么？-3"><a href="#18-重绘和渲染的区别-是什么？-3" class="headerlink" title="18. 重绘和渲染的区别 是什么？ 3"></a>18. 重绘和渲染的区别 是什么？ 3</h3><p>渲染开销较大，位于其后的所有元素都将重新渲染。 而重绘，只是修改了外观，开销相对较小。尤其是移动端。</p><h3 id="19-http-请求返回的状态码中-200，-500-，404-分别代表什么含义？-2"><a href="#19-http-请求返回的状态码中-200，-500-，404-分别代表什么含义？-2" class="headerlink" title="19. http 请求返回的状态码中 200， 500 ，404 分别代表什么含义？ 2"></a>19. http 请求返回的状态码中 200， 500 ，404 分别代表什么含义？ 2</h3><p>答案： 200 请求成功。 500 服务器内部错误， 404 找不到页面。</p><h3 id="20-前端开发中减少-http-请求的方法有哪些？-3"><a href="#20-前端开发中减少-http-请求的方法有哪些？-3" class="headerlink" title="20.  前端开发中减少 http 请求的方法有哪些？ 3"></a>20.  前端开发中减少 http 请求的方法有哪些？ 3</h3><p>答案：</p><ul><li>合并js css</li><li>使用雪碧图</li><li>使用字体图标</li></ul><h3 id="21-用过的前端构建工具有哪些，构建工具的好处是什么？-3"><a href="#21-用过的前端构建工具有哪些，构建工具的好处是什么？-3" class="headerlink" title="21. 用过的前端构建工具有哪些，构建工具的好处是什么？ 3"></a>21. 用过的前端构建工具有哪些，构建工具的好处是什么？ 3</h3><p>参考答案： 例如， grunt gulp webpack 等。 好处是 可以提升前端开发的效率，使前端开发流程更加规范化。</p><h3 id="22-用过什么-MVVM框架，简述一下MVVM框架-解决了什么问题？-4"><a href="#22-用过什么-MVVM框架，简述一下MVVM框架-解决了什么问题？-4" class="headerlink" title="22. 用过什么 MVVM框架，简述一下MVVM框架 解决了什么问题？ 4"></a>22. 用过什么 MVVM框架，简述一下MVVM框架 解决了什么问题？ 4</h3><p>参考答案： Angular/Vue/React  解决了，修改modal层的数据后，更新view层的麻烦，以及使VIEW层逻辑更加清晰且易于维护。</p><h3 id="23-let-与-const-区别-3"><a href="#23-let-与-const-区别-3" class="headerlink" title="23. let 与 const 区别 3"></a>23. let 与 const 区别 3</h3><p>let 类似于var 只作用于所在的代码块，相当于局部变量；<br>const 声明一个不可修改的常量。</p><h3 id="24-正则表达式中-ig-代表的含义是什么？-3"><a href="#24-正则表达式中-ig-代表的含义是什么？-3" class="headerlink" title="24. 正则表达式中 /ig  代表的含义是什么？ 3"></a>24. 正则表达式中 /ig  代表的含义是什么？ 3</h3><p>答案： i 代表 ignore 忽略大小写， g 代表globa 全局匹配</p><h3 id="25-以下表达式输出什么？-4"><a href="#25-以下表达式输出什么？-4" class="headerlink" title="25. 以下表达式输出什么？ 4"></a>25. 以下表达式输出什么？ 4</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params">a</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(a)&#123;</span><br><span class="line">    <span class="keyword">this</span>.a = a;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">console</span>.log(<span class="keyword">new</span> C(<span class="number">2</span>).a);</span><br></pre></td></tr></table></figure><p>答案： 2</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS部分&quot;&gt;&lt;a href=&quot;#CSS部分&quot; class=&quot;headerlink&quot; title=&quot;CSS部分&quot;&gt;&lt;/a&gt;CSS部分&lt;/h2&gt;&lt;p&gt;说明： 按照难易程度 见到到困难依次为 1-5， 答案仅供参考。&lt;/p&gt;
&lt;h3 id=&quot;1-如何清除浮动-1&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="HTML" scheme="https://liangsandian.com/categories/html/"/>
    
      <category term="CSS" scheme="https://liangsandian.com/categories/html/CSS/"/>
    
      <category term="Javascript" scheme="https://liangsandian.com/categories/html/CSS/js/"/>
    
    
  </entry>
  
  <entry>
    <title>移动端css3的一些奇葩事er</title>
    <link href="https://liangsandian.com/a/mobile-css-bug.html"/>
    <id>https://liangsandian.com/a/mobile-css-bug.html</id>
    <published>2016-12-30T09:24:39.000Z</published>
    <updated>2017-11-14T08:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>最近做移动端 H5 及CSS3的东西比较多。 主要应用在微信服务号和企业号，所以主要是兼容微信浏览器（Chrome 37+）。 这个版本的webkit内核对 CSS3的支持已经相当完善了。但还是免不了要踩到一些坑。本文作为记录，会持续更新，以供后续翻看。</p><h2 id="z-index-1-引发的问题"><a href="#z-index-1-引发的问题" class="headerlink" title="z-index: -1 引发的问题"></a>z-index: -1 引发的问题</h2><p>当设置z-index 为-1的元素，在页面中存在的时候，微信浏览器中会出现莫名其妙的bug。<br>bug复现方法：</p><p>制作一个页面高度大于一屏高度的界面，然后在页脚部分加入如下样式的元素<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:relative; width: 100px; height: 50px; margin:0 auto;border: 1px solid #ccc;"</span>&gt;</span></span><br><span class="line">    这里是文字内容</span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">"position:absolute;  height: 1px; background-color: red; left:0; right:0; top: 50%;"</span>&gt;</span>&amp;nbsp;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>上面的代码，在IOS版本的微信浏览器中（测试用微信版本：6.5.2  设备：iphone 7 plus 128GB ios版本：10.2 14C92） 当拖动到一屏以下的部分再返回，就会出现上方的画面闪动的情况。而去掉z-index:-1属性，恢复正常。 因此在移动端开发中，慎用 z-index:-1</p><h2 id="keyframes动画中-使用-绝对定位的元素-进行位置移动导致的问题"><a href="#keyframes动画中-使用-绝对定位的元素-进行位置移动导致的问题" class="headerlink" title="keyframes动画中 使用 绝对定位的元素 进行位置移动导致的问题"></a>keyframes动画中 使用 绝对定位的元素 进行位置移动导致的问题</h2><p>问题出现的情况为： 当使用keyframes动画控制 absolute定位的元素 进行 top/left 等位置变换的时候，在ios10下会出现拉动到底部拽住不松开导致屏幕快速闪烁的问题。</p><p>复现代码如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 海豚提示 --&gt;</span></span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"dolphin-tips"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">span</span> <span class="attr">class</span>=<span class="string">"dolphin-icon"</span>&gt;</span><span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"tips-box"</span>&gt;</span></span><br><span class="line">      温馨提示：这里是温馨提示的内容。</span><br><span class="line">    <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- end of 海豚提示 --&gt;</span></span><br></pre></td></tr></table></figure><p>CSS代码如下</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">海豚提醒</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">++++++++++++++++++++++++++++++++++++++++++++++</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="selector-class">.dolphin-tips</span> &#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#ff5b95</span>;</span><br><span class="line">  <span class="attribute">margin-top</span>: <span class="number">4rem</span>;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">0.6rem</span>;</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">url</span>(../img/wave.png) repeat-x <span class="number">#fffaea</span>;</span><br><span class="line">  <span class="attribute">background-size</span>: <span class="number">6%</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">1rem</span>;</span><br><span class="line">  <span class="attribute">padding-top</span>: <span class="number">2rem</span>;</span><br><span class="line">  <span class="attribute">border-bottom-left-radius</span>: .<span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">border-bottom-right-radius</span>: .<span class="number">5rem</span>;</span><br><span class="line">  <span class="attribute">-webkit-animation</span>: tipswave <span class="number">12s</span> linear infinite;</span><br><span class="line">          <span class="attribute">animation</span>: tipswave <span class="number">12s</span> linear infinite; &#125;</span><br><span class="line">  <span class="selector-class">.dolphin-tips</span> <span class="selector-class">.dolphin-icon</span> &#123;</span><br><span class="line">    <span class="attribute">display</span>: block;</span><br><span class="line">    <span class="attribute">position</span>: absolute;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">3.8rem</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">3.8rem</span>;</span><br><span class="line">    <span class="attribute">top</span>: -<span class="number">2.4rem</span>;</span><br><span class="line">    <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">    <span class="attribute">margin-left</span>: -<span class="number">1.9rem</span>;</span><br><span class="line">    <span class="attribute">background-image</span>: <span class="built_in">url</span>(../img/dolphin.png);</span><br><span class="line">    <span class="attribute">background-repeat</span>: no-repeat;</span><br><span class="line">    <span class="attribute">background-size</span>: cover;</span><br><span class="line">    <span class="attribute">-webkit-animation</span>: dolphinjump <span class="number">2.5s</span> ease infinite;</span><br><span class="line">            <span class="attribute">animation</span>: dolphinjump <span class="number">2.5s</span> ease infinite; &#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> tipswave &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">0%</span>; &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">0%</span>; &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">0%</span>; &#125; &#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> tipswave &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">0%</span> <span class="number">0%</span>; &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">50%</span> <span class="number">0%</span>; &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">background-position</span>: <span class="number">100%</span> <span class="number">0%</span>; &#125; &#125;</span><br><span class="line"></span><br><span class="line">@-<span class="keyword">webkit</span>-<span class="keyword">keyframes</span> dolphinjump &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">0.25rem</span>; &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0.25rem</span>; &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">0.25rem</span>);&#125; &#125;</span><br><span class="line"></span><br><span class="line">@<span class="keyword">keyframes</span> dolphinjump &#123;</span><br><span class="line">  0% &#123;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">0.25rem</span>; &#125;</span><br><span class="line">  50% &#123;</span><br><span class="line">    <span class="attribute">top</span>:<span class="number">0.25rem</span>; &#125;</span><br><span class="line">  100% &#123;</span><br><span class="line">    <span class="attribute">top</span>:-<span class="number">0.25rem</span>);&#125; &#125;</span><br></pre></td></tr></table></figure><p>修复方案：<br>将动画中的 top: xxrem; 修改为 transform: translateY(xxrem); 问题解决。 其实仔细想一下， top等的位移其实是触发了 repaint 而 translateY 的方式则只是CSS自身的坐标偏移，对性能的消耗还是很轻微的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;最近做移动端 H5 及CSS3的东西比较多。 主要应用在微信服务号和企业号，所以主要是兼容微信浏览器（Chrome 37+）。 这个版本的w
      
    
    </summary>
    
      <category term="CSS" scheme="https://liangsandian.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>谷歌字体被墙的替换解决方案</title>
    <link href="https://liangsandian.com/a/goog-webfont-dl.html"/>
    <id>https://liangsandian.com/a/goog-webfont-dl.html</id>
    <published>2016-11-22T05:11:24.000Z</published>
    <updated>2017-11-14T08:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>包括WordPress、opencart等国外的cms普遍使用谷歌的cdn，jquery还好说，就一个文件，如果是字体文件的话逐个下载会比较麻烦。其实早有npm模块可以解决。废话不多说，直接上模块</p><h3 id="使用npm模块下载字体"><a href="#使用npm模块下载字体" class="headerlink" title="使用npm模块下载字体"></a>使用npm模块下载字体</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g goog-webfont-dl</span><br><span class="line">goog-webfont-dl -a -f <span class="string">"Source Sans Pro"</span> -y <span class="string">"italic,bold,regular"</span></span><br></pre></td></tr></table></figure><h3 id="参数介绍"><a href="#参数介绍" class="headerlink" title="参数介绍"></a>参数介绍</h3><p>其中的参数<br>-a 代表下载所有格式<br>-f 代表定义字体名称，后面空格后紧跟字体名<br>-y 代表字体样式（style) 其中多个字体样式以逗号隔开，例如：”italic,bold,regular” 或者 “300,500,700”<br>更多参数介绍可以查看goog-webfont-dl的官方文档：<a href="https://www.npmjs.com/package/goog-webfont-dl" target="_blank" rel="external">https://www.npmjs.com/package/goog-webfont-dl</a></p><h3 id="注意："><a href="#注意：" class="headerlink" title="注意："></a>注意：</h3><p>字体名和字体样式的参数必须以双引号包含，单引号会报400错误。<br>这样下载后，它会自动帮你生成一个字体名称命名的css文件以及包含该字体所有格式的字体文件夹。</p><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>使用的时候，只需要将上面的css复制到你自己的项目样式表中，或者直接新引用该样式表即可。<br>注意：需要修改字体的相对路径哦（默认为../fonts/fontname.ttf)的形式。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;包括WordPress、opencart等国外的cms普遍使用谷歌的cdn，jquery还好说，就一个文件，如果是字体文件的话逐个下载会比较麻烦。其实早有npm模块可以解决。废话不多说，直接上模块&lt;/p&gt;
&lt;h3 id=&quot;使用npm模块下载字体&quot;&gt;&lt;a href=&quot;#使用n
      
    
    </summary>
    
      <category term="CSS" scheme="https://liangsandian.com/categories/CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>LINUX配置FTP（添加用户，锁定FTP目录，设置FTP用户权限等）</title>
    <link href="https://liangsandian.com/a/linux-config-ftp.html"/>
    <id>https://liangsandian.com/a/linux-config-ftp.html</id>
    <published>2016-11-18T07:20:46.000Z</published>
    <updated>2017-11-14T08:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>对于阿里云的centos 已经用过N次了，不过对linux的这些东东了解的并不完善，仍然处在运维的入门选手的水平。 本文主要用于记录如何设置FTP账户，并赋予权限及锁定目录等。</p><h3 id="安装VSFTP"><a href="#安装VSFTP" class="headerlink" title="安装VSFTP"></a>安装VSFTP</h3><p>一般来说cent都可以使用yum来安装<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install vsftp</span><br></pre></td></tr></table></figure></p><h3 id="新增系统用户，并设定用户目录"><a href="#新增系统用户，并设定用户目录" class="headerlink" title="新增系统用户，并设定用户目录"></a>新增系统用户，并设定用户目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /aliadata/www/website -s /sbin/nologin ftpusername</span><br><span class="line">passwd ftpusername</span><br><span class="line">//然后输入两遍密码</span><br><span class="line">chown -R ftpusername /aliadata/www/website</span><br><span class="line">chmod -R 777 /aliadata/www/website</span><br></pre></td></tr></table></figure><h3 id="修改vsftpd-conf-配置文件用于限定用户的权限和目录"><a href="#修改vsftpd-conf-配置文件用于限定用户的权限和目录" class="headerlink" title="修改vsftpd.conf 配置文件用于限定用户的权限和目录"></a>修改vsftpd.conf 配置文件用于限定用户的权限和目录</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">去掉下面两句的<span class="comment">#号</span></span><br><span class="line">chroot_list_enable=yes</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">然后将想要禁止跳转目录的用户写入文件chroot_list就可以了</span><br><span class="line">第二种</span><br><span class="line">修改vsftp.conf</span><br><span class="line">添加一句</span><br><span class="line">chroot_local_user=NO</span><br><span class="line">去掉下面两句的<span class="comment">#号</span></span><br><span class="line">chroot_list_enable=yes</span><br><span class="line">chroot_list_file=/etc/vsftpd/chroot_list</span><br><span class="line">然后将想要禁止跳转目录的用户写入文件chroot_list就可以了</span><br></pre></td></tr></table></figure><h3 id="重启vsftp，以加载修改的配置"><a href="#重启vsftp，以加载修改的配置" class="headerlink" title="重启vsftp，以加载修改的配置"></a>重启vsftp，以加载修改的配置</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service vsftpd restart</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h3&gt;&lt;p&gt;对于阿里云的centos 已经用过N次了，不过对linux的这些东东了解的并不完善，仍然处在运维的入门选手的水平。 本文主要用于记录如何设置
      
    
    </summary>
    
      <category term="LINUX" scheme="https://liangsandian.com/categories/LINUX/"/>
    
    
  </entry>
  
  <entry>
    <title>OPENCART开发部署常见问题</title>
    <link href="https://liangsandian.com/a/opencart-dev-problems.html"/>
    <id>https://liangsandian.com/a/opencart-dev-problems.html</id>
    <published>2016-10-19T07:21:08.000Z</published>
    <updated>2017-11-14T08:44:41.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做一个opencart的项目，遇到的坑不少，不过相对来说还是一套比较成熟的系统，该有的功能都比较齐全了。 如果选一套合适的主题，可以实现大多数的功能了。 下面说一下部署方面遇到的几个问题吧。</p><h2 id="使用的git自动部署，忽略以下文件，手动上传"><a href="#使用的git自动部署，忽略以下文件，手动上传" class="headerlink" title="使用的git自动部署，忽略以下文件，手动上传"></a>使用的git自动部署，忽略以下文件，手动上传</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">/install</span><br><span class="line">/journal-cache</span><br><span class="line">/<span class="built_in">test</span></span><br><span class="line">/config.php</span><br><span class="line">/system/storage/cache/</span><br><span class="line">/system/storage/logs/</span><br><span class="line">/admin/config.php</span><br></pre></td></tr></table></figure><p>其中config.php的配置 包括 admin/config.php的文件中的路径是相对服务器的根路径的。 因此这个位置的修改比较重要，如果没有写对，通常后台会报500。</p><p>另外，登录后发现前台或者后台报了一堆错误，通常是 unexpect xxx 之类的内容。 fclose failed 等等，推测应该是文件读写权限问题，或者找不到对应的问题。 仔细一想就明白了，那就是linux下的 缓存文件写入失败了，没权限，从而导致打开失败，关闭文件也失败。  在终端运行一下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod -R 777 /path/to/your/site/system/storage/</span><br></pre></td></tr></table></figure></p><p>OK，运行之后上面报的错误就消失了。</p><h2 id="本地测试导入的图片数据上传后无法显示"><a href="#本地测试导入的图片数据上传后无法显示" class="headerlink" title="本地测试导入的图片数据上传后无法显示"></a>本地测试导入的图片数据上传后无法显示</h2><p>其实 opencart这点做的有点像 WordPress，就是把图片路径使用了绝对路径，这样会导致更换域名或者空间后无法打开文件的问题。 可以将导出的sql文件 放到文本编辑器（例如atom）等，然后使用批量替换 将 <a href="http://www.yourdomain.com/" target="_blank" rel="external">http://www.yourdomain.com/</a> 替换为 /  这样再导入数据库 引用的就是相对路径了，图片一起上传就可以看到啦。</p><h2 id="多语言设置后，指定前台语言无效"><a href="#多语言设置后，指定前台语言无效" class="headerlink" title="多语言设置后，指定前台语言无效"></a>多语言设置后，指定前台语言无效</h2><p>这个问题再网上搜了很久，例如 language front end not working 等， 最后也未能找到答案。 只能翻看源码了， 其实从oc2.3以后，管理后台增加了 language选项locale这个输入框，作用就是根据用户浏览器的接受语言（详见浏览器请求header中的 accept-language 的值）进行自动判断 auto-detected， 而这个优先级是高于后台设置的前台语言的。 也就是说如果判断有匹配的语言，那就会根据用户浏览器的语言读取对应的语言包，如果没有得到才会取后台指定的这个前台语言。</p><p>这部分的逻辑可言从 /siteroot/catelog/controller/startup/startup.php 中找到。 有时候用户就希望无论用户语言是什么都优先显示一种语言，然后允许用户手动切换。 或者只为后台设置中文，前台显示英文，这种情况就只能将判断的逻辑去掉，或者直接用后台设置的选项覆盖。</p><p>例如本例的情况可以将/siteroot/catelog/controller/startup/startup.php 中大概61~63行<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (!array_key_exists($code, $languages)) &#123;</span><br><span class="line">  $code = <span class="keyword">$this</span>-&gt;config-&gt;get(<span class="string">'config_language'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>改为<br><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// if (!array_key_exists($code, $languages)) &#123;</span></span><br><span class="line">  $code = <span class="keyword">$this</span>-&gt;config-&gt;get(<span class="string">'config_language'</span>);</span><br><span class="line"><span class="comment">// &#125;</span></span><br></pre></td></tr></table></figure></p><p>这样既可将前台语言固定为 后台设置中指定的前台语言。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做一个opencart的项目，遇到的坑不少，不过相对来说还是一套比较成熟的系统，该有的功能都比较齐全了。 如果选一套合适的主题，可以实现大多数的功能了。 下面说一下部署方面遇到的几个问题吧。&lt;/p&gt;
&lt;h2 id=&quot;使用的git自动部署，忽略以下文件，手动上传&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="PHP" scheme="https://liangsandian.com/categories/php/"/>
    
    
  </entry>
  
  <entry>
    <title>TFBOYS</title>
    <link href="https://liangsandian.com/a/tfboys.html"/>
    <id>https://liangsandian.com/a/tfboys.html</id>
    <published>2016-09-04T08:04:08.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Reason"><a href="#Reason" class="headerlink" title="Reason"></a>Reason</h2><p>程序员都有个病，就是什么问题都喜欢找到根源，而不选择跳过或者忽略。我自己也万万没想到在这个博客里面会写上TFBOYS这么一个标题。以前对这个组合并不了解，仅有的认识就是在贴吧或者论坛中看到的“掏粪男孩”而来，当时还特意去百度了一下，才知道了TFBOYS，还有EXO，那个时候的情况大致可以用粉他们的进入死忠模式，讨厌他们的把他们从头黑到脚。</p><p>其实，主要是最近认识的一个朋友，每次一起吃饭的时候，总要提起TFBOYS，用词大致都是我凯，我千，我源等等。 然后我无意识的插了一句，掏粪男孩那么好啊（其实是听多了一般把TFBOYS自动读作掏粪男孩），然后瞬间就迎来了对方没好气的攻击。 </p><h2 id="tfboys到底有多火？"><a href="#tfboys到底有多火？" class="headerlink" title="tfboys到底有多火？"></a>tfboys到底有多火？</h2><p>既然能让一个有成熟理智大学毕业若干年的人喜欢到如此地步，相比TFBOYS必然是有过人之处的。然后专门把他们的歌单找出来听了一遍，而且认真的看了一下歌词。然后一边听着他们的歌曲，一遍在PC上刷着tfboys三位的微博，然后第一次知道了还有爱豆这么个APP</p><p><img src="/uploads/2016/09/tfboys-aidou-rank.jpg" alt="爱豆明星粉丝签到排名" title="爱豆明星粉丝签到排名"></p><p><img src="/uploads/2016/09/tfboys-aidou-news.jpg" alt="爱豆tfboys粉丝追踪timeline" title="爱豆tfboys粉丝追踪timeline"></p><p>下面是百度几位明星的搜索指数，由此可见tfboys到底多受欢迎</p><p><img src="/uploads/2016/09/tfboys-diff-line.jpg" alt="对比趋势图"></p><p>那些30+的阿姨扮演着母性粉，而80的尾巴90的头，则在姐姐粉和情人粉之间来回切换，至于00后则大多是处于单纯的喜欢他们的帅气、音乐天赋等，所以tfboys除了80以前的几乎通吃。</p><h2 id="粉丝的特殊养成模式"><a href="#粉丝的特殊养成模式" class="headerlink" title="粉丝的特殊养成模式"></a>粉丝的特殊养成模式</h2><p>（以下内容来自知乎，我提取部分内容进行整理）<br>这个组合之所以红的很快，主要是因为其特殊的运作模式——养成式。这个模式比较特殊，是因为粉丝们可以一同见证偶像的成长（年龄的从小到大），当这些小孩子展现出他们才华的时候，粉丝们会有一种满足感（好像他们亲身培养了新生偶像），而他们的成长历程（经纪公司展现给粉丝们的成长历程）会有很多地方与粉丝产生共鸣，为自己不完满的童年画了一个完满的示范。</p><p>这种造星路线其实已经是在日本被广泛运用的了，最早可见于国内的小虎队，tfboys三人中每个人都有自己的特色</p><hr><p>TFBOYS的造星模式，很明显模仿了日本最擅长打造男性偶像明星的经纪公司——杰尼斯事务所（所谓的J家）的造星方案，“成长感”是其中的秘密配方。</p><p>杰尼斯一般招收10到14岁的男孩利用业余时间进社培训，声乐、乐器、舞蹈、主持、演技多方面培训，发现潜质好的苗子，培训几年后，会打包成一个组合正式出道。</p><p>以前日本最火的木村拓哉所在的SMAP、目前日本最红的男性偶像组合Arashi岚，都是杰尼斯的成功产品。</p><p>J家方案里，未出道的练习生也会参加小型的综艺活动、接受粉丝杂志的采访和拍摄、在演唱会上为出道组合当伴舞什么的，有限曝光，这样一是为练习生积累经验和人气，二是测试粉丝的反应，三是留下大量素材，出道后可以供粉丝深度挖掘，提高粉丝的粘性。</p><p>搜着偶像十二三岁初入娱乐圈的懵懂视频，看着现在偶像已经二十来岁在演唱会上光芒四射的表演，完全激起一种共同成长励志向上的正能量好吗？</p><p>作者：孙小圣</p><hr><h2 id="粉丝自白"><a href="#粉丝自白" class="headerlink" title="粉丝自白"></a>粉丝自白</h2><p>以下来自一位自诩从不混饭圈，结果一把年纪掉进坑的知乎网友</p><hr><p>看到这题我忍不住说下我的入坑经历。</p><p>在饭千玺之前，我因为某些事情特别烦躁，每天都过得很不开心。<br>十一月补全员，沦陷了，再补舞蹈综艺，彻底沦陷，然后过上了每天看看千玺相关心情就会变好的日子。<br>但饭爱豆的人都知道，当你喜欢上一个明星后你会忍不住想让身边的人都知道他的好，于是我作死没忍住和别人讲我饭上了TF，知道这个消息，情况好点的就震惊一下或劝我几句，情况糟糕的就会抨击我，附带黑TaoFen，最难过的是有些之前三观很合的朋友，在知道后反而开始发黑的视频图片，当时非常郁闷，但一想我之前也是个黑啊，那安利她们知道千玺的好就好了呀。</p><p>作者：SaSha</p><hr><p>看完这一段，我相信，就不难理解为什么tf的粉们会对哪些不喜欢的人说，“不喜欢tf的人是因为根本不了解他们”这句话了。</p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>听着tf的歌曲，大多都是励志向上的歌曲，年轻、充满活力，有节奏感（纯业余听歌的评论），喜欢听这类歌曲完全没有问题。包括《青春修炼手册》，我是在听过很多次之后才知道是tfboys的歌曲。</p><p>从tf的成长经历（他们的MV、自制剧等）中，很多粉丝会感受到那种乐观、积极向上的正能量，而正能量具备很强的感染力，甚至像上文粉丝说的让自己走出阴霾的心情。</p><p>有自己喜欢的明星，也算一种不错的精神追求，记得而之前一档娱乐节目中播放的一个已婚的女生为了追韩星，非要在这位明星服兵役期间才肯怀孕，不然会耽误她追星。其实追星并没有上面错，而是不应该过于狂热，不要到了别人说一句明星的不好，你就要跟人发飙，甚至为了追星不顾自己的实际情况，置现实和身边人于不顾的程度。</p><p>同时，如果你明知道对方喜欢一个明星，却故意去攻击和抹黑，也显得低级无趣味，因此每个人的喜好都值得尊重，只要不过分，做一个正常人就好。</p><p>最后来一个PAPI酱追星的一期视频</p><p><a href="http://player.video.qiyi.com/844e14c4dc23c9ca4deb3f022b4174fb/0/0/v_19rrl0rld4.swf-albumId=464973700-tvId=464973700-isPurchase=0-cnId=22" target="_blank" rel="external">点此打开视频</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Reason&quot;&gt;&lt;a href=&quot;#Reason&quot; class=&quot;headerlink&quot; title=&quot;Reason&quot;&gt;&lt;/a&gt;Reason&lt;/h2&gt;&lt;p&gt;程序员都有个病，就是什么问题都喜欢找到根源，而不选择跳过或者忽略。我自己也万万没想到在这个博客里面会写上TF
      
    
    </summary>
    
      <category term="我的涂鸦" scheme="https://liangsandian.com/categories/scrawl/"/>
    
    
  </entry>
  
  <entry>
    <title>git windows下快速入门与心得</title>
    <link href="https://liangsandian.com/a/git-study.html"/>
    <id>https://liangsandian.com/a/git-study.html</id>
    <published>2016-09-01T08:06:46.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>之前的团队主要使用的还是SVN，对于开发环境主要为windows，且规模较小的团队来说，只进行轻度入门级的使用，那么SVN无论是学习成本，还是操作舒适度都是远胜GIT的（如果你非要说windows的命令行也很方便，就当我没说），但是为什么GIT的受欢迎度会高于SVN呢，其实是有原因的，个人就使用方面，简单总结如下：</p><ul><li>GIT的分支是分布式的，每个分支都可以在服务端有一个单独的拷贝（领导要看xxx的代码可以单独clone分支）</li><li>GIT的数据校验采用SHA1算法，比SVN对数据的完整性保存更胜一筹</li><li>GIT可以方便的merge分支，较好的防止分支的遗漏</li><li>由于采取的保存方式不同，GIT在分支切换速度方面完全碾压SVN，对于需要频繁修复BUG的场景，快速切换不同的branch而又不丢失原有的工作场景，那GIT再适合不过了</li></ul><h2 id="快速入门教程"><a href="#快速入门教程" class="headerlink" title="快速入门教程"></a>快速入门教程</h2><p>主要介绍一下常用的命令，需要快速入门推荐参考 <a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">廖雪峰的GIT教程</a> 或者阮一峰的GIT教程，这里仅仅作为一个记录windows下快速入门的方法</p><h3 id="安装，下载windows客户端"><a href="#安装，下载windows客户端" class="headerlink" title="安装，下载windows客户端"></a>安装，下载windows客户端</h3><p>下载git，GIT官网下载地址 <a href="https://git-scm.com/downloads" target="_blank" rel="external">https://git-scm.com/downloads</a>，根据自己操作系统的版本下载对应的安装包，一路下一步安装。</p><h3 id="初始化配置git身份信息"><a href="#初始化配置git身份信息" class="headerlink" title="初始化配置git身份信息"></a>初始化配置git身份信息</h3><p>在本地要建立项目的文件夹右键——Git Bash Here， 打开git窗口。运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#配置git的用户名，仅需要执行一次，名字随便写，用来标识你的身份</span></span><br><span class="line">git config --global user.name <span class="string">"Your Name"</span></span><br><span class="line"><span class="comment">#配置git的邮箱，仅需要执行一次，邮箱随便写，用来标识你的身份</span></span><br><span class="line">git config --global user.email youremail<span class="comment">#example.com</span></span><br><span class="line"><span class="comment">#生成你的身份公钥和私钥</span></span><br><span class="line"><span class="comment">#公钥用来和服务端进行匹配验证身份，需要提供给git服务器管理员</span></span><br><span class="line"><span class="comment">#私钥用来保证你的身份不被冒充</span></span><br><span class="line"><span class="comment">#输入命令后一路回车即可</span></span><br><span class="line">ssh-keygen -t rsa -C <span class="string">"youremail#example.com"</span></span><br></pre></td></tr></table></figure></p><h3 id="将git的公钥提供给管理员或者保存到你的github等网站的指定位置"><a href="#将git的公钥提供给管理员或者保存到你的github等网站的指定位置" class="headerlink" title="将git的公钥提供给管理员或者保存到你的github等网站的指定位置"></a>将git的公钥提供给管理员或者保存到你的github等网站的指定位置</h3><p>在上一步中我们执行了 ssh-kegen后，在C:\Users\Administrator 文件夹（根据你的用户名，如果不知道可以直接在资源管理器地址栏输入 %userprofile% 回车），找到.ssh文件夹，打开后即可看到.pub结尾的文件，用记事本打开即可得到你的公钥内容。<br>将公钥内容保存到你的github个人信息中的keys中，或者提供给你的git服务器管理员为你添加到服务端</p><h3 id="初始化仓库或者拉取已有的仓库"><a href="#初始化仓库或者拉取已有的仓库" class="headerlink" title="初始化仓库或者拉取已有的仓库"></a>初始化仓库或者拉取已有的仓库</h3><p>如果是新建的项目，需要初始化仓库<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#初始化</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment">#...新建文件，修改文件等操作...</span></span><br><span class="line"><span class="comment">#添加所有修改到缓存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#提交缓存区的文件到仓库</span></span><br><span class="line"><span class="comment">#其中-m "comment" 为必选参数，如果不填写将自动调用vim编辑器要求你输入提交说明</span></span><br><span class="line">git commit -m <span class="string">"comment"</span> </span><br><span class="line"><span class="comment">#提交到仓库后，再推送到远程服务器</span></span><br><span class="line">git push</span><br></pre></td></tr></table></figure></p><p>如果是拉取 已有的项目协同开发<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#获取远程仓库到本地文件夹</span></span><br><span class="line">git <span class="built_in">clone</span> git@SERVER:path/to/repo.git</span><br><span class="line"><span class="comment">#与远程仓库建立关联</span></span><br><span class="line">git remote add origin git@SERVER:path/to/repo.git</span><br><span class="line"><span class="comment">#然后就可以进行 add commit push 操作了</span></span><br></pre></td></tr></table></figure></p><h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="忽略指定文件夹"><a href="#忽略指定文件夹" class="headerlink" title="忽略指定文件夹"></a>忽略指定文件夹</h3><p>在git所在目录找到或新建 .gitignore文件，然后每行一个，目录以/开头，保存即可。注意：如果之前已经对目录进行了add等操作，则需要先 rm commit 才能生效</p><h3 id="每次都要执行add-commit-push-太麻烦了，有没有一步到位的。"><a href="#每次都要执行add-commit-push-太麻烦了，有没有一步到位的。" class="headerlink" title="每次都要执行add commit push 太麻烦了，有没有一步到位的。"></a>每次都要执行add commit push 太麻烦了，有没有一步到位的。</h3><p>有， 添加快捷操作别名即可，并且可以保存为全局的git配置，例如一句命令执行add commit push操作<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#将 add commit push 命令保存为git的全局配置</span></span><br><span class="line">git config --global alias.amp <span class="string">'!git add . &amp;&amp; git commit -a -m "commit" &amp;&amp; git push'</span></span><br></pre></td></tr></table></figure></p><p>运行后，即可在%userprofile%.gitconfig 文件中找到对应的配置项信息如下<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[<span class="built_in">alias</span>]</span><br><span class="line">    amp = !git add . &amp;&amp; git commit -a -m \<span class="string">"commit\" &amp;&amp; git push</span></span><br></pre></td></tr></table></figure></p><p>这样再想一步添加，提交并推送到远程仓库就可以运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git amp</span><br></pre></td></tr></table></figure></p><p>ok，一步到位了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h2&gt;&lt;p&gt;之前的团队主要使用的还是SVN，对于开发环境主要为windows，且规模较小的团队来说，只进行轻度入门级的使用，那么SVN无论是学习成本，还
      
    
    </summary>
    
      <category term="TOOLS" scheme="https://liangsandian.com/categories/tools/"/>
    
    
      <category term="git" scheme="https://liangsandian.com/tags/git/"/>
    
  </entry>
  
  <entry>
    <title>Hexo + GitPages开启markdown之旅</title>
    <link href="https://liangsandian.com/a/hello-hexo.html"/>
    <id>https://liangsandian.com/a/hello-hexo.html</id>
    <published>2016-08-30T08:27:42.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>转来转去最后发现，自己维护空间神马的真心费力，我只是想专心的写个文字，记录一下，吐个槽而已，由此开启我的Hexo + GitPages + Git 之旅。<a id="more"></a></p><h2 id="吐槽"><a href="#吐槽" class="headerlink" title="吐槽"></a>吐槽</h2><p>大学时期就在写博，内个时候的互联网跟现在没法比（2005年），从最早的网易免费虚拟空间开始，到后来的QQ空间，百度hi/新浪博客，再到后来自己搭建技术博客，最早使用各种荒野虚拟空间，价格贵，而且不稳定，再后面用了几年的MediaTemplate（这在当时可是很多特别爱写博客的人才舍得购买的），最后直到近两年开始使用阿里云。</p><p>使用的CMS更不必说，从最早的自己asp原创，到后来使用WordPress，然后自己也编写或修改了至少3个wp主题（然而没有一个令自己满意的），改来改去，最后发现耗费了很大的精力在这些造轮子的事情上面，反而没能坚持把博客写下去，并且WordPress在很多低配主机上面特别耗内存，又转战php版的z-blog等等，最后发现这些真心都有点笨重，而且总是在不停的折腾。</p><p>转来转去最后发现，自己维护空间神马的真心费力，我只是想专心的写个文字，记录一下，吐个槽而已，由此开启我的Hexo + GitPages + Git 之旅。</p><p>OK，吐槽结束，作为一个“资深”博主（手动嘲讽一下我自己），写了很多水文，有些内容甚至自己都没有吃透，其实写的时候就是为了记录，希望从这里开始，可以post一些高质量的好文吧。</p><h2 id="先说一下为什么选择这套组合"><a href="#先说一下为什么选择这套组合" class="headerlink" title="先说一下为什么选择这套组合"></a>先说一下为什么选择这套组合</h2><h3 id="基于nodejs"><a href="#基于nodejs" class="headerlink" title="基于nodejs"></a>基于nodejs</h3><p>无论是Windows下还是Mac下，部署起来都很简单（看个别的Jekyll基于Ruby，不是太方便），当然这不是重点，因为作为一个前端，用Sass的话还是必然要装Ruby的</p><h3 id="插件支持和主题"><a href="#插件支持和主题" class="headerlink" title="插件支持和主题"></a>插件支持和主题</h3><p>当然，作为前端狗，这不是重点，毕竟咱可以自己想怎么玩就怎么玩。 但是，我懒，还是用现成的吧。</p><h3 id="跟其他选择比较"><a href="#跟其他选择比较" class="headerlink" title="跟其他选择比较"></a>跟其他选择比较</h3><p>跟WordPress对比，我靠~ 无论是主题还是插件被WP秒了N条街，然并卵，我只是想简单的写写博客，敲敲代码而已，用它足够了。</p><p>跟自己搭建服务器对比，我靠~ 自己搭建的服务器，起码服务端的数据是私有的，而github上发表的东西人家分分钟可以给你clone走。再次然并卵，隐私数据我只需要用evernote之类的即可，干嘛发到博客上，发上来就是给人看的呀，还巴不得大家都来抄呢。 </p><p>速度对比，github自带cdn，完全免费，几乎不存在宕机或者被DDOS的可能。</p><p>暂时就想到这些，后面可以再补充，废话好多呀，下面进入正题吧</p><h2 id="搭建步骤"><a href="#搭建步骤" class="headerlink" title="搭建步骤"></a>搭建步骤</h2><p>并不详细，只是做个记录，把一些容易忘记的写一下，需要详细教程的可以自行搜索</p><h3 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h3><p>如何安装？ 好吧，我只丢个nodejs下载地址，剩下的自己弄<br> <a href="https://nodejs.org/zh-cn/download/" target="_blank" rel="external">nodeJs下载地址</a></p><h3 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h3><p>还是只丢一个地址，剩下的自己弄<br><a href="https://git-scm.com/downloads" target="_blank" rel="external">Git下载地址</a></p><h3 id="注册并登陆GitHub"><a href="#注册并登陆GitHub" class="headerlink" title="注册并登陆GitHub"></a>注册并登陆GitHub</h3><p><a href="https://github.com" target="_blank" rel="external">GitHub</a></p><h3 id="为hexo新建项目地址"><a href="#为hexo新建项目地址" class="headerlink" title="为hexo新建项目地址"></a>为hexo新建项目地址</h3><p>在github网站新建项目，命名为 yourname.github.io </p><p>注意，此处的yourname必须是你github上的username。 然后点击该项目中的settings（是网页上该项目的settings哦，不是用户头像的settings），然后在GitHub Pages 处的 Source后面选择master分支，并保存。</p><p>好了，这一步将该项目的git地址复制备用。</p><h3 id="生成git公钥"><a href="#生成git公钥" class="headerlink" title="生成git公钥"></a>生成git公钥</h3><p>在你的电脑中，新建想要保存网站项目的文件夹，右键——GitBash Here<br>在打开的命令窗口中，输入如下命令<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --global user.name <span class="string">"yourname"</span> <span class="comment">#配置你的github用户名</span></span><br><span class="line">git config --global user.email <span class="string">"yourname@domain.com"</span> <span class="comment">#配置你的github邮箱</span></span><br></pre></td></tr></table></figure></p><p>说明：这里地用户名和邮箱跟你的github上的用户名并没有任何关系，此处仅仅是为了区分当前电脑使用者的身份（笔者的理解）。<br>好的，到此，你已经向git标识了你的身份，然后根据身份生成一个公钥用来与服务端配对</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"your_email@youremail.com"</span></span><br></pre></td></tr></table></figure><p>默认，会在你的系统用户目录（windows用户通常为C:\Users\Administrator，linux用户通常为/usr/或/etc/）下生成一个.ssh的文件，打开后找到.pub扩展名的文件，用文本编辑器打开，即可看到一堆代码，全选复制。</p><h3 id="将标识你身份的公钥粘贴到github上实现身份识别配对"><a href="#将标识你身份的公钥粘贴到github上实现身份识别配对" class="headerlink" title="将标识你身份的公钥粘贴到github上实现身份识别配对"></a>将标识你身份的公钥粘贴到github上实现身份识别配对</h3><p>然后登陆github网站，点击右上角用户头像——设置（head icon -&gt; Settings），SSH and GPG keys 点击，News SSH key，将上一步中复制的内容粘贴进去即可完成配对。</p><h3 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#hexo-cli代表 hexo commond line interface </span></span><br><span class="line"><span class="comment">#-g代表全局安装，这样可以直接在windows命令行运行</span></span><br><span class="line">npm install hexo-cli -g</span><br></pre></td></tr></table></figure><p>然后，安装hexo并保存到配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo --save</span><br></pre></td></tr></table></figure><p>初始化hexo</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init</span><br></pre></td></tr></table></figure><p>然后执行安装操作（init初始化各种依赖包，类似于加载了package.json）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure><h3 id="配置hexo"><a href="#配置hexo" class="headerlink" title="配置hexo"></a>配置hexo</h3><p>经过上面的步骤，我们已经把hexo默认内容全部拉取到这个文件夹了，下面只需要进行简单的配置就可以开启你的hexo之旅了<br>配置文件保存在项目根目录下的 _config.yml 文件中。 打开之后根据英文自己对照修改吧。 注意格式。下面说一下如何同步到github</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Deployment</span></span><br><span class="line"><span class="comment">## Docs: https://hexo.io/docs/deployment.html</span></span><br><span class="line">deploy:</span><br><span class="line">  <span class="built_in">type</span>: git</span><br><span class="line">  repo: git@github.com:yourname/yourname.github.io.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure><p>将配置文件中的 repo 地址改为上面从gihub新建项目获得的地址</p><h3 id="更多-config-yml-配置"><a href="#更多-config-yml-配置" class="headerlink" title="更多 _config.yml 配置"></a>更多 _config.yml 配置</h3><h4 id="主题语言配置"><a href="#主题语言配置" class="headerlink" title="主题语言配置"></a>主题语言配置</h4><p>语言的配置，说明：这里跟随的zh-CN对应themes/xxx 目录下的languages文件夹下的目录名称，然后在模板中采用sprintf的方式进行调用，详见hexo官方手册的说明<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">language: zh-CN</span><br></pre></td></tr></table></figure></p><h4 id="分类-标签别名设置"><a href="#分类-标签别名设置" class="headerlink" title="分类/标签别名设置"></a>分类/标签别名设置</h4><p>按照以下格式设置后即可实现对应的分类或者标签URL以别名的形式显示，注意修改该配置后需要生成并重启server才能生效<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">category_map:</span><br><span class="line">  我的涂鸦: scrawl</span><br><span class="line">  读书笔记: readnote</span><br><span class="line">tag_map:</span><br><span class="line">  兼容性: compatibility</span><br></pre></td></tr></table></figure></p><h4 id="设置feed-url以及sitemap"><a href="#设置feed-url以及sitemap" class="headerlink" title="设置feed url以及sitemap"></a>设置feed url以及sitemap</h4><p>要想使用feed订阅功能，需要先安装hexo-generator-feed 以及 hexo-generator-sitemap 两个插件，然后执行hexo generate 即可生成对应的feed文件和sitemap文件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p><p>安装完成后也是需要生成一下</p><h4 id="设置主页-分类页-标签页每页显示的文章数"><a href="#设置主页-分类页-标签页每页显示的文章数" class="headerlink" title="设置主页/分类页/标签页每页显示的文章数"></a>设置主页/分类页/标签页每页显示的文章数</h4><p>注意：该功能修改后，需要clean一下，并重新生成重启server，否则无效（此处被坑的很惨）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#设置feed订阅，依赖hexo-generator-feed</span><br><span class="line">feed:</span><br><span class="line">  type: atom #feed类型 atom或者rss2</span><br><span class="line">  path: atom.xml #feed路径</span><br><span class="line">  limit: 20  #feed文章数量</span><br><span class="line"></span><br><span class="line">#存档页面显示设置</span><br><span class="line">archive_generator:</span><br><span class="line">  per_page: 0 #存档页面每页显示条数，0代表显示全部，无翻页</span><br><span class="line">  yearly: true #是否生成按年保存的存档页面</span><br><span class="line">  monthly: false #是否生成按月保存的存档页面</span><br><span class="line">  daily: false #是否生成按日保存的存档页面</span><br><span class="line">category_generator:</span><br><span class="line">  per_page: 0 #分类页面每页显示条数，0代表显示全部，无翻页</span><br></pre></td></tr></table></figure></p><h4 id="添加搜索功能"><a href="#添加搜索功能" class="headerlink" title="添加搜索功能"></a>添加搜索功能</h4><p>搜索功能依赖插件hexo-generator-search，安装插件后即可自动在根目录生成search.xml文件，然后配合search.js（某些主题中包含，例如pln主题，大家也可以自行搜索）即可实现搜索功能<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-generator-search</span><br><span class="line">hexo g</span><br></pre></td></tr></table></figure></p><h3 id="运行并部署hexo"><a href="#运行并部署hexo" class="headerlink" title="运行并部署hexo"></a>运行并部署hexo</h3><p>最后一步，马上看到曙光啦，哈哈<br>hexo 3.0版本以后，还需要安装一个插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure></p><p>安装后就可以在本地的gitbash中执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo generate</span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure></p><p>然后，如果配置文件你没改错都话，等命令运行完毕，即可通过 yourname.github.io 查看到你的博客啦。</p><h3 id="本地浏览器预览，可以通过执行命令"><a href="#本地浏览器预览，可以通过执行命令" class="headerlink" title="本地浏览器预览，可以通过执行命令"></a>本地浏览器预览，可以通过执行命令</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server</span><br></pre></td></tr></table></figure><h3 id="配置独立域名"><a href="#配置独立域名" class="headerlink" title="配置独立域名"></a>配置独立域名</h3><p>当然，Hexo + GitPages 是支持独立域名的。 只需要在项目的sources目录下新建CNAME文件（大写，无扩展名），并输入你要绑定的域名即可。然后进入域名控制面板设置cname解析到 yourname.github.io 即可生效。</p><p>购买SSL证书，还可以支持https的哦~</p><h2 id="一些高级用法"><a href="#一些高级用法" class="headerlink" title="一些高级用法"></a>一些高级用法</h2><h3 id="生成和部署命令支持缩写"><a href="#生成和部署命令支持缩写" class="headerlink" title="生成和部署命令支持缩写"></a>生成和部署命令支持缩写</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo g <span class="comment">#等价于hexo generate</span></span><br><span class="line">hexo d <span class="comment">#而等价于hexo deploy</span></span><br><span class="line">hexo d -g <span class="comment">#等价于以上两行命令之和</span></span><br></pre></td></tr></table></figure><h3 id="在多台设备之间共同维护hexo"><a href="#在多台设备之间共同维护hexo" class="headerlink" title="在多台设备之间共同维护hexo"></a>在多台设备之间共同维护hexo</h3><p>使用git创建一个新的branch，然后提交到github<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#在本地的hexo工作目录（假设已经搭建好了）初始化创建git</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment">#创建并切换到分支，等价于git branch hexo &amp; git checkout hexo</span></span><br><span class="line">git checkout -b hexo </span><br><span class="line"><span class="comment">#将所有文件添加到git缓存区</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#注意，默认的缓存大小比较小，需要更改缓存大小，因此需要执行下面的语句</span></span><br><span class="line">git config http.postBuffer 524288000</span><br><span class="line"><span class="comment">#然后再执行提交操作，将文件提交到待提交区</span></span><br><span class="line">git commit -m <span class="string">"commit introduction"</span></span><br><span class="line"><span class="comment">#最后push到github远程</span></span><br><span class="line">git push --<span class="built_in">set</span>-upstream origin hexo</span><br></pre></td></tr></table></figure></p><p>这样在其他设备上面就可以执行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> git@github.com:aleafo/aleafo.github.io.git</span><br><span class="line">git checkout -b hexo</span><br><span class="line">git add remote origin hexo</span><br></pre></td></tr></table></figure></p><p>对hexo编写的环境等进行同步了。</p><h3 id="写作"><a href="#写作" class="headerlink" title="写作"></a>写作</h3><p>写作支持md文件的变量，可以直接在source/_posts下新建md文件，或者运行<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo n [filename]</span><br></pre></td></tr></table></figure></p><p>来新建一个md文件。<br>新建完成后，在md文件中可以使用如下方式给文档设置标题<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: This is your article title, you can use this variable</span><br><span class="line">tags: </span><br><span class="line">    - tag1</span><br><span class="line">    - tag2</span><br><span class="line">categories: </span><br><span class="line">    - catname</span><br><span class="line">date: 2016-08-30 16:27:42</span><br><span class="line">---</span><br><span class="line">And this is some decription about the article <span class="comment">&lt;!--more--&gt;</span></span><br></pre></td></tr></table></figure></p><p>通过上面的形式即可设置标题和摘要，系统将自动提取’—‘上方的部分作为变量，详见官方文档 <a href="https://hexo.io/zh-cn/docs/front-matter.html" target="_blank" rel="external">Front-matter</a>。</p><ul><li>title =&gt; 文档标题</li><li>tags  =&gt; 文档标签，换行后以短横线+空格+标签名，每行一个</li><li>categories =&gt; 分类名称，目前hexo只支持一个分类，如果填写多个，后面的分类将被当做子分类</li><li>date =&gt; 文档发表日期</li><li>&lt;!–more–&gt; =&gt; 系统变量三横线正文开始到more之前的部分将作为摘要</li></ul><h3 id="使用sublime的markdown插件编写md文档"><a href="#使用sublime的markdown插件编写md文档" class="headerlink" title="使用sublime的markdown插件编写md文档"></a>使用sublime的markdown插件编写md文档</h3><ul><li>在sublime的包安装管理器中，搜索MarkdownEditing回车即可安装markdown编辑器，系统将自动识别markdown的文档</li><li>安装ominiMarkdownPreviewer插件，可以在编写md文档的同时在浏览器中实时查看效果</li></ul><p>更多写作技巧待补充。您也可以查看markdown的官方文档，获取更多详细的关于markdown的创始人文档 <a href="http://wowubuntu.com/markdown/index.html" target="_blank" rel="external">markdwon语法说明简体中文版</a>，英文好的直接看这里 <a href="http://daringfireball.net/projects/markdown/" target="_blank" rel="external">Markdown</a></p><p>当然你也可以直接使用一些markdown的神器来编写文档，例如windows下的markdownPad, Mac下的Mou等</p><h3 id="开启github-pages的-SSL加密访问模式-https访问"><a href="#开启github-pages的-SSL加密访问模式-https访问" class="headerlink" title="开启github pages的 SSL加密访问模式 https访问"></a>开启github pages的 SSL加密访问模式 https访问</h3><p>默认github pages就是支持https的，这里选择最简便的方式，就是使用CloudFlare(以下简称CF)的DNS免费版的HTTPS加密模式。</p><ul><li>到 <a href="https://www.cloudflare.com/" target="_blank" rel="external">CloudFlare</a> 注册一个账号，然后添加域名，一路Continue（下一步），最后会给你分配两个DNS</li><li>到你的域名控制面板，把DNS修改为CF分配给你的DNS</li><li>在CF的域名管理界面，设置好CNAME到你的github pages的域名。</li><li>在CF顶部的导航点击Page Rules，Create Page Rule，然后URL处输入 <a href="http://*.yourblogdomain.com/*，下面的设置选择" target="_blank" rel="external">http://*.yourblogdomain.com/*，下面的设置选择</a> Always Use HTTPS，点击Save And Deploy.</li><li><p>将hexo的配置文件_config.yml修改如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url: https://yourblogdomain.com <span class="comment">#blog的URL，修改为https前缀</span></span><br><span class="line">enforce_ssl: yourblogdomain.com <span class="comment">#blog的URL，强制SSL模式访问</span></span><br></pre></td></tr></table></figure></li><li><p>然后在生成并部署即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d -g</span><br></pre></td></tr></table></figure></li></ul><h3 id="导入wordpress-和-cnblog"><a href="#导入wordpress-和-cnblog" class="headerlink" title="导入wordpress 和 cnblog"></a>导入wordpress 和 cnblog</h3><p>因为之前的很多文章大部分都是发表在了wordpress，以及后来记录到了cnblogs，而且数量还不少，所以有必要使用导入的功能。<br>wordpress使用系统自带的导出功能，导出为xml备份即可，然后使用插件<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-migrator-wordpress --save</span><br><span class="line"><span class="comment">#web.wordpress.xxx.xml即为导出的文件，放到当前命令行所在目录</span></span><br><span class="line">hexo migrate wordpress web.wordpress.xxx.xml</span><br></pre></td></tr></table></figure></p><p>这样就可以成功将wordpress导入到hexo了。同样的cnblogs也提供了一款插件，不过从hexo3.0就不再支持了（作者自己说的），其实有一个迂回的方法，就是先下载一个wp的插件，名字叫做博客搬家到wordpress，可以将博客园、OSChina、CSDN、点点、LOFTER搬家到wordpress，然后再同上面的步骤导入即可。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;转来转去最后发现，自己维护空间神马的真心费力，我只是想专心的写个文字，记录一下，吐个槽而已，由此开启我的Hexo + GitPages + Git 之旅。
    
    </summary>
    
      <category term="TOOLS" scheme="https://liangsandian.com/categories/tools/"/>
    
    
      <category term="git" scheme="https://liangsandian.com/tags/git/"/>
    
      <category term="hexo" scheme="https://liangsandian.com/tags/hexo/"/>
    
  </entry>
  
  <entry>
    <title>sublime 集成git插件，及git常用命令</title>
    <link href="https://liangsandian.com/a/sublime-git.html"/>
    <id>https://liangsandian.com/a/sublime-git.html</id>
    <published>2016-08-25T00:18:00.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>以前用了很久的totoiseSVN，显然不够高大上，开发界的版本装x利器还得是git。然而git的命令行对没怎么用过linux的人可能觉得还不如用gitGUI，可是当你知道sublime可以集成git插件的时候，你就会改变自己的想法了，真心方便。</p><p>1. 安装git客户端，最常用的msysgit，具体步骤就略过了，大家自行搜索吧。</p><p>2. sublime安装git插件</p><p>Ctrl+shift+P，调出 install package面板，然后搜索git，回车安装</p><p><span style="line-height: 1.5;">3. 配置git公钥，此处以gitHub为例，你也可以参考&nbsp;<a href="/a/git-linux-server.html">git 在linux下服务端搭建</a>&nbsp;自己搭建一个git服务端</span></p><p><span style="line-height: 1.5;">然后通过将公钥添加到服务端进行身份的认证</span></p><p><span style="line-height: 1.5;">4. 初始化本地的git配置信息</span></p><div class="cnblogs_code"><br><pre>git config –global user.name <span style="color: #800000;">“</span><span style="color: #800000;">username</span><span style="color: #800000;">“</span><span style="color: #000000;"><br>git config </span>–global user.email <span style="color: #800000;">“</span><span style="color: #800000;">username@email.com</span><span style="color: #800000;">“</span></pre><br></div><p>再设置一下push的参数，因为sublime的插件中push动作并不能接收参数</p><div class="cnblogs_code"><br><pre>git config –global push.default matching #代表提交所有匹配的分支</pre><br></div><p>5. 然后就可以通过sublime的Ctrl+Shift+P调用git:init命令创建一个git仓库</p><p>执行命令后会要求你选择一个目录，选择后即可在该目录下新建文件进行git的各种操作了</p><p>6. git常用命令解析</p><p>其实大多数情况下，我们的开发无非就是修改、提交、获取、推送到远程</p><p>git与svn的一点区别就是commit并不会提交到远程服务端，push才是真正的提交到服务端</p><p>因此，我们可以理解为</p><div class="cnblogs_code"><br><pre><span style="color: #000000;">git:add  #把文件添加进去，实际上就是把文件修改添加到暂存区<br>git:commit #提交更改，实际上就是把暂存区的所有内容提交到当前分支<br>git:push #讲缓存中的修改推送到远程服务端<br><br>当然git:add 和 git:commit 也可以使用 git:commit </span>-am <span style="color: #800000;">“</span><span style="color: #800000;">comment content</span><span style="color: #800000;">“</span> 两步合并为一步执行</pre><br></div><p><span style="color: #ff0000;">重要提醒：修改文件后如果不执行add直接commit是无效的</span></p><p>版本的回退</p><div class="cnblogs_code"><br><pre><span style="color: #000000;">git reflog #查看历史版本，然后根据现实的版本号回退<br>git reset </span>–hard HEAD^<span style="color: #000000;"> #回退到上一个版本<br>git reset </span>–hard HEAD^^<span style="color: #000000;"> #回退到上上一个版本<br>git reset </span>–hard HEAD~<span style="color: #800080;">100</span><span style="color: #000000;"> #回退到100个以前的版本<br>git reset </span>–hard <span style="color: #800080;">3628164</span> #回退到3628164这个版本</pre><br></div><p>场景1：当你改乱了工作区某个文件的内容，想直接丢弃工作区的修改时，用命令git checkout – file。</p><p>场景2：当你不但改乱了工作区某个文件的内容，还添加到了暂存区时，想丢弃修改，分两步，第一步用命令git reset HEAD file，就回到了场景1，第二步按场景1操作。</p><p>场景3：已经提交了不合适的修改到版本库时，想要撤销本次提交，参考版本回退一节，不过前提是没有推送到远程库。</p><p>删除文件</p><div class="cnblogs_code"><br><pre>git <span style="color: #0000ff;">rm</span><span style="color: #000000;"> filename #从git删除文件，执行后还需要commit和push才能最终在远程生效<br>git checkout </span>–filename #检出最新的已经commit的版本，可以用于恢复版本或者恢复删除的文件</pre><br></div><p>从远程主机获取</p><div class="cnblogs_code"><br><pre>git remote add origin git@github.com:yourname/<span style="color: #000000;">learngit.git #从远程主机获取<br>git push </span>-u origin master #推送到远程主机，首次运行在命令行模式下，运行一次之后再到sublime中直接使用git push即可默认以master分支进行上传</pre><br></div><p>分支</p><div class="cnblogs_code"><br><pre><span style="color: #000000;">Git鼓励大量使用分支：<br><br>查看分支：git branch<br><br>创建分支：git branch </span><name><span style="color: #000000;"><br><br>切换分支：git checkout </span><name><span style="color: #000000;"><br><br>创建</span>+切换分支：git checkout -b <name><span style="color: #000000;"><br><br>合并某分支到当前分支：git merge </span><name><span style="color: #000000;"><br><br>删除分支：git branch </span>-d <name></name></name></name></name></name></pre><br><pre><span>强制删除分支：git branch -D <name> #没合并的情况下是禁止删除的，需要强制删除</name></span></pre><br></div><p>多人协作开发，远程push和pull</p><div class="cnblogs_code"><br><pre>查看远程库信息，使用git remote -<span style="color: #000000;">v；<br>本地新建的分支如果不推送到远程，对其他人就是不可见的；<br>从本地推送分支，使用git push origin branch</span>-<span style="color: #000000;">name，如果推送失败，先用git pull抓取远程的新提交；<br>在本地创建和远程分支对应的分支，使用git checkout </span>-b branch-name origin/branch-<span style="color: #000000;">name，本地和远程分支的名称最好一致；<br>建立本地分支和远程分支的关联，使用git branch </span>–set-upstream branch-name origin/branch-<span style="color: #000000;">name；<br>从远程抓取分支，使用git pull，如果有冲突，要先处理冲突。</span></pre><br></div><p>文件忽略</p><div class="cnblogs_code"><br><pre><span style="color: #000000;">忽略某些文件时，需要编写.gitignore；<br>.gitignore文件本身要放到版本库里，并且可以对.gitignore做版本管理！</span></pre><br></div><p>国外某大神做的git常用命令图</p><p><img src="/uploads/2016/08/212228-20160825161934538-201977158.png" alt=""></p><p>详细教程，参考廖老师的git教程：<a href="http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000" target="_blank" rel="external">http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;以前用了很久的totoiseSVN，显然不够高大上，开发界的版本装x利器还得是git。然而git的命令行对没怎么用过linux的人可能觉得还不如用gitGUI，可是当你知道sublime可以集成git插件的时候，你就会改变自己的想法了，真心方便。&lt;/p&gt;
&lt;p&gt;1. 安装g
      
    
    </summary>
    
      <category term="TOOLS" scheme="https://liangsandian.com/categories/tools/"/>
    
    
      <category term="sublime" scheme="https://liangsandian.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>git 在linux下服务端搭建</title>
    <link href="https://liangsandian.com/a/git-linux-server.html"/>
    <id>https://liangsandian.com/a/git-linux-server.html</id>
    <published>2016-08-24T02:30:00.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>本文以阿里云的centos为例，其他linux请自行参照对应方式。</p><h3 id="服务端安装git"><a href="#服务端安装git" class="headerlink" title="服务端安装git"></a>服务端安装git</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install git</span><br></pre></td></tr></table></figure><h3 id="服务端添加只有git-shell权限的用户，将username替换为要添加的用户"><a href="#服务端添加只有git-shell权限的用户，将username替换为要添加的用户" class="headerlink" title="服务端添加只有git-shell权限的用户，将username替换为要添加的用户"></a>服务端添加只有git-shell权限的用户，将username替换为要添加的用户</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">which</span> git-shell <span class="comment">#先查看git-shell在哪里</span></span><br><span class="line"><span class="comment">#例如，返回结果为 /usr/bin/git-shell</span></span><br><span class="line">useradd -s /usr/bin/git-shell git</span><br><span class="line"><span class="comment">#解释：其中 -s 参数指定用户的shell权限，这样防止git用户随意登录</span></span><br></pre></td></tr></table></figure><h3 id="初始化仓库并赋予git用户权限"><a href="#初始化仓库并赋予git用户权限" class="headerlink" title="初始化仓库并赋予git用户权限"></a>初始化仓库并赋予git用户权限</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#注意 --bare 前面是两个短横线</span></span><br><span class="line">git init --bare sample.git</span><br><span class="line">chown -R git:git sample.git</span><br></pre></td></tr></table></figure><h3 id="在客户端，也就是gitbash（windows用户）生成密钥和公钥，邮箱地址改为你自己的，当然后面的两个-t-和-C-参数可以不要。"><a href="#在客户端，也就是gitbash（windows用户）生成密钥和公钥，邮箱地址改为你自己的，当然后面的两个-t-和-C-参数可以不要。" class="headerlink" title="在客户端，也就是gitbash（windows用户）生成密钥和公钥，邮箱地址改为你自己的，当然后面的两个 -t 和 -C 参数可以不要。"></a>在客户端，也就是gitbash（windows用户）生成密钥和公钥，邮箱地址改为你自己的，当然后面的两个 -t 和 -C 参数可以不要。</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">"comment_about_this_user"</span></span><br></pre></td></tr></table></figure><ul><li>-t参数指定key加密方式，这里可以省略该参数</li><li>-C参数指定该key的备注，因为服务端需要保存这个key（可以有很多用户的key，为了便于区分，请添加备注，通常可以使用用户的邮箱地址代替）</li></ul><p>然后到用户目录（默认）找到.ssh文件夹下的.pub扩展名的文件，编辑器打开复制</p><h3 id="服务端打开git权限，并设置保存公钥的目录"><a href="#服务端打开git权限，并设置保存公钥的目录" class="headerlink" title="服务端打开git权限，并设置保存公钥的目录"></a>服务端打开git权限，并设置保存公钥的目录</h3><p>进入ssh的设置打开RSA认证，以及公钥认证，并设定key文件保存路径<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/.ssh/sshd_config</span><br></pre></td></tr></table></figure></p><p>将文档中对应行的注释符号“#”去掉，保存退出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">RSAAuthentication yes</span><br><span class="line">PubkeyAuthentication yes</span><br><span class="line">AuthorizedKeysFile  .ssh/authorized_keys</span><br></pre></td></tr></table></figure></p><p>从上面的代码中可以看到保存authorized key的路径在 /home/git/.ssh/authorized_keys 下，其中 /home/git/ 为git的安装目录。</p><h3 id="将公钥文件添加到服务端的git的配置文件中"><a href="#将公钥文件添加到服务端的git的配置文件中" class="headerlink" title="将公钥文件添加到服务端的git的配置文件中"></a>将公钥文件添加到服务端的git的配置文件中</h3><p>根据上一步获得的key路径，我们进入/home/git，发现不存在.ssh文件夹，新建文件夹 .ssh，并进入该文件夹（其实默认ls命令是不显示点开头文件夹的），然后新建文件authorized_keys，将第4步中获取的公钥保存到该文件并退出。然后重启ssh</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/git</span><br><span class="line">mkdir .ssh</span><br><span class="line">vi .ssh/authorized_keys</span><br><span class="line"><span class="comment">#粘贴第四步中复制的公钥</span></span><br><span class="line"><span class="comment">#保存退出</span></span><br><span class="line">service sshd restart <span class="comment">#重启sshd</span></span><br></pre></td></tr></table></figure><h3 id="至此，即可在客户端通过git-clone免密码提交或更新了"><a href="#至此，即可在客户端通过git-clone免密码提交或更新了" class="headerlink" title="至此，即可在客户端通过git clone免密码提交或更新了"></a>至此，即可在客户端通过git clone免密码提交或更新了</h3><p>git clone git@SERVER:/path/to/sample.git</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本文以阿里云的centos为例，其他linux请自行参照对应方式。&lt;/p&gt;
&lt;h3 id=&quot;服务端安装git&quot;&gt;&lt;a href=&quot;#服务端安装git&quot; class=&quot;headerlink&quot; title=&quot;服务端安装git&quot;&gt;&lt;/a&gt;服务端安装git&lt;/h3&gt;&lt;figure 
      
    
    </summary>
    
      <category term="TOOLS" scheme="https://liangsandian.com/categories/tools/"/>
    
    
      <category term="git" scheme="https://liangsandian.com/tags/git/"/>
    
      <category term="linux" scheme="https://liangsandian.com/tags/linux/"/>
    
  </entry>
  
  <entry>
    <title>服务端配置 某科学技术服务端</title>
    <link href="https://liangsandian.com/a/science-ssh-shadowsks.html"/>
    <id>https://liangsandian.com/a/science-ssh-shadowsks.html</id>
    <published>2016-08-23T05:26:00.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>shadowxxx &nbsp;你懂的。</p><h2 id="服务端配置"><a href="#服务端配置" class="headerlink" title="服务端配置"></a>服务端配置</h2><p>其实还是很简单的。 centos为例</p><div class="cnblogs_code"><br><pre><span style="color: #0000ff;">yum</span> <span style="color: #0000ff;">install</span> python-setuptools &amp;&amp;<span style="color: #000000;"> easy_install pip<br>pip </span><span style="color: #0000ff;">install</span> shadowsocks </pre><br></div><p>然后自己写个配置文件，保存到/etc/shadowsocks.json</p><div class="cnblogs_code"><br><pre><span style="color: #000000;">{<br>   </span><span style="color: #800000;">“</span><span style="color: #800000;">server</span><span style="color: #800000;">“</span>:<span style="color: #800000;">“</span><span style="color: #800000;">my_server_ip</span><span style="color: #800000;">“</span><span style="color: #000000;">,<br>   </span><span style="color: #800000;">“</span><span style="color: #800000;">server_port</span><span style="color: #800000;">“</span>:<span style="color: #800080;">7068</span><span style="color: #000000;">,<br>   </span><span style="color: #800000;">“</span><span style="color: #800000;">local_address</span><span style="color: #800000;">“</span>: <span style="color: #800000;">“</span><span style="color: #800000;">127.0.0.1</span><span style="color: #800000;">“</span><span style="color: #000000;">,<br>   </span><span style="color: #800000;">“</span><span style="color: #800000;">local_port</span><span style="color: #800000;">“</span>:<span style="color: #800080;">1080</span><span style="color: #000000;">,<br>   </span><span style="color: #800000;">“</span><span style="color: #800000;">password</span><span style="color: #800000;">“</span>:<span style="color: #800000;">“</span><span style="color: #800000;">mypassword</span><span style="color: #800000;">“</span><span style="color: #000000;">,<br>    </span><span style="color: #800000;">“</span><span style="color: #800000;">timeout</span><span style="color: #800000;">“</span>:<span style="color: #800080;">300</span><span style="color: #000000;">,<br>   </span><span style="color: #800000;">“</span><span style="color: #800000;">method</span><span style="color: #800000;">“</span>:<span style="color: #800000;">“</span><span style="color: #800000;">aes-256-cfb</span><span style="color: #800000;">“</span><span style="color: #000000;">,<br>   </span><span style="color: #800000;">“</span><span style="color: #800000;">fast_open</span><span style="color: #800000;">“</span>: <span style="color: #0000ff;">false</span><br>} </pre><br></div><p>具体参数的含义就不解释了，单词字面意思理解即可。</p><p>然后，有一点需要注意，有时候这样并不能启动成功，因为cent默认设置防火墙是阻止不明端口开放的，所以要把你设置的servoer_port添加到防火墙白名单，如下：</p><div class="cnblogs_code"><br><pre>iptables -A INPUT -p tcp –dport <span style="color: #800080;">7068</span> -j ACCEPT</pre><br></div><h2 id="启动："><a href="#启动：" class="headerlink" title="启动："></a><span style="line-height: 1.5;">启动：</span></h2><p><span style="line-height: 1.5;">然后使用命令</span></p><div class="cnblogs_code"><br><pre>ssserver -c /etc/shadowsocks.json </pre><br></div><p>启动，这种启动方式必须开着终端才能用，因此要使用一种服务启动的方式，如下：</p><div class="cnblogs_code"><br><pre>ssserver -c /etc/shadowsocks.json -d start </pre><br></div><p>酱紫就可以愉快的玩耍了~~~</p><p>然后，想关闭的话，运行</p><div class="cnblogs_code"><br><pre>ssserver -c /etc/shadowsocks.json -d stop </pre><br></div><p>&nbsp;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;shadowxxx &amp;nbsp;你懂的。&lt;/p&gt;
&lt;h2 id=&quot;服务端配置&quot;&gt;&lt;a href=&quot;#服务端配置&quot; class=&quot;headerlink&quot; title=&quot;服务端配置&quot;&gt;&lt;/a&gt;服务端配置&lt;/h2&gt;&lt;p&gt;其实还是很简单的。 centos为例&lt;/p&gt;
&lt;div cl
      
    
    </summary>
    
      <category term="SERVER" scheme="https://liangsandian.com/categories/server/"/>
    
    
  </entry>
  
  <entry>
    <title>windows下 sbulime text 安装less2css踩的几个坑</title>
    <link href="https://liangsandian.com/a/win-sublime-less2css.html"/>
    <id>https://liangsandian.com/a/win-sublime-less2css.html</id>
    <published>2016-08-22T23:03:00.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>sublime 就不介绍了，less2css 是一个安装在sublime上的插件，可以让你书写less后自动生成css文件，而且还可以提示less的语法错误。</p><p>搜了一下相关的教程，很多都写的不全，按照他们的步骤操作下来之后发现有错误，甚至无法正确运行。</p><p>直入主题吧，步骤（这里只写windows下的安装步骤，mac下使用brew来安装很简单，而且一般也不会出错，直接跳过了）</p><p>1. 自动编译依赖于node，因此要先安装node，进入node官网下载自己需要的版本然后安装完成，通常安装程序会自动帮你配置环境变量，将node安装目录添加到系统变量中，如果没有请检查并手动添加该环境变量（不知道如何设置？自己动手咯）；</p><p>2. 安装完node后还需要安装node下的less，需要全局安装（安装完node后，自动就带npm了，所以在dos命令行直接运行如下命令即可，-g 参数代表全局安装，会帮你安装到%appdata%目录下）。</p><p>npm install -g less</p><p>不安装的话将无法自动编译</p><p>3. 在less2css运行时还会执行一个 clean-css的功能，因此还需要在node下安装 less-plugin-clean-css，同样需要全局安装</p><p>npm install -g less-plugin-clean-css</p><p>不安装的话，每次保存会弹出错误提示，当然你也可以通过修改less2css的配置文件屏蔽错误提示。</p><p>4. 最后我们打开sublime，使用install package命令安装less2css插件（ctrl+shift+P）-&gt; install package -&gt; less2css 回车，等待安装完毕重启sublime即可。&nbsp;</p><p>5. 为了支持less的语法高亮显示，还需要安装一个sublime的插件less 这样就可以流畅的书写less了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;sublime 就不介绍了，less2css 是一个安装在sublime上的插件，可以让你书写less后自动生成css文件，而且还可以提示less的语法错误。&lt;/p&gt;
&lt;p&gt;搜了一下相关的教程，很多都写的不全，按照他们的步骤操作下来之后发现有错误，甚至无法正确运行。&lt;/p&gt;
      
    
    </summary>
    
      <category term="TOOLS" scheme="https://liangsandian.com/categories/tools/"/>
    
    
      <category term="sublime" scheme="https://liangsandian.com/tags/sublime/"/>
    
  </entry>
  
  <entry>
    <title>最近基本把青岛近期招高级前端的几家公司都面了个遍</title>
    <link href="https://liangsandian.com/a/qd-webfrontend-interview.html"/>
    <id>https://liangsandian.com/a/qd-webfrontend-interview.html</id>
    <published>2016-08-13T07:15:00.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>然而还是要先承认这个杯具，青岛的前端目前来看没有上面大的发展。纠结留下来还是去更大的城市~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;然而还是要先承认这个杯具，青岛的前端目前来看没有上面大的发展。纠结留下来还是去更大的城市~&lt;/p&gt;

      
    
    </summary>
    
      <category term="我的涂鸦" scheme="https://liangsandian.com/categories/scrawl/"/>
    
    
  </entry>
  
  <entry>
    <title>【吐槽】关于256个 class可以覆盖一个id的问题</title>
    <link href="https://liangsandian.com/a/css-256-class.html"/>
    <id>https://liangsandian.com/a/css-256-class.html</id>
    <published>2016-08-09T08:04:00.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>还是说今天下午面试的事情，被面试官问了 40多分钟的问题，我觉得丫 一定是从哪个网站down了几份面试题，自个儿整合了一下，然后挨个问，刚开始感觉哟，不错哦，面试官懂的蛮多的。 然后问到某个问题之后，我有一种被深深的套路了的感觉，好感度瞬间降到冰点，然后心情真心不太爽。 下面就拿这个问题来说吧，以前真心没注意过，试问谁会在一个dom上写256个class</p><p>起因就是 css权重问题，其实是个老生常谈，一般人都会这么回答， ID是100 &nbsp;class 10 &nbsp;tagname 是1 &nbsp;云云。 然而，这考官说，那class是否有可能覆盖id 我说 不能。 多少个都不能么? 此刻我其实是稍微有点动摇的，但是考官既然单独拎出来问，估计是能的。然而我还是跟着自己的感觉走，因为我即使说能，那我也不知道如何解释，所以我说不能，多少个都不能。 然后考官大人就说，之前的一个面试者也是这么回答的，但实际上是能的，class超过256个的话是可以覆盖的。</p><p>此时，我只能作崇拜状，哇，长知识了，这个我以前还真不知道。</p><p>然而，到家晚饭后忽然又想起这个问题来，表示怀疑中，然后自己亲测了一下，结果：</p><p>chrome safari 以及移动端webkit内核（通常都是停留在webkit40左右） 新版的 256个class已然无法覆盖id， 很显然，浏览器厂商也认为这特么是个BUG ，有木有。（<a href="http://corpus.hubwiz.com/1010000002986983.html）" target="_blank" rel="external">http://corpus.hubwiz.com/1010000002986983.html）</a></p><p>可惜，IE 还是死性不改， EDGE &nbsp;FF也依然是 256个class可以覆盖id的~ &nbsp;（2016.8.9 亲测~）</p><p><span style="line-height: 1.5;">结论： 考官装逼失败，你虽然知道256个class是有可以覆盖id的情况，但是你并不清楚最新的浏览器标准已经修复了该BUG，拿已给小众小众不能再小众的问题来考倒面试者，确定不是在装13？？？ 本来刚到了之后面试感觉还是蛮不错的公司，考官的一些LOW逼问题让人无语，你考基础归考基础，可是别炫技装逼咱们还能好好做朋友的。</span></p><p>本来呢，是不怎么打算考虑这家了，然而人力资源的小胖MM态度蛮好，很热情。 临走出门的时候，前台的小姑娘，很漂亮有木有，出门之前正好跟在我后面，让妹子帮忙刷了下门禁。 我不是内中看到漂亮姑娘就走不动的人好么。</p><p>然而，最终，如果钱给到了，这些嘛不重要啦，都是敲代码在哪不一样，活干好了，没人会委屈你~~</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;还是说今天下午面试的事情，被面试官问了 40多分钟的问题，我觉得丫 一定是从哪个网站down了几份面试题，自个儿整合了一下，然后挨个问，刚开始感觉哟，不错哦，面试官懂的蛮多的。 然后问到某个问题之后，我有一种被深深的套路了的感觉，好感度瞬间降到冰点，然后心情真心不太爽。 下
      
    
    </summary>
    
      <category term="Javascript" scheme="https://liangsandian.com/categories/js/"/>
    
    
  </entry>
  
  <entry>
    <title>[转]彻底弄懂css中单位px和em,rem的区别</title>
    <link href="https://liangsandian.com/a/css-px-em-rem.html"/>
    <id>https://liangsandian.com/a/css-px-em-rem.html</id>
    <published>2016-08-09T07:28:00.000Z</published>
    <updated>2017-11-14T08:11:58.000Z</updated>
    
    <content type="html"><![CDATA[<p>难怪会问我 rem 和 em， 这俩或在移动端还是很有必要学习的。 root em OK？</p><p><img src="/uploads/2016/08/1505196wwz21kmjckgk22k.jpg" alt="1.jpg" title="1.jpg"></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;国内的设计师大都喜欢用px，而国外的<a href="http://www.html5cn.org/" target="_blank" rel="external">网站</a>大都喜欢用em和rem，那么三者有什么区别，又各自有什么优劣呢？</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>PX特点</p><p>1. IE无法调整那些使用px作为单位的字体大小；</p><p>2. 国外的大部分网站能够调整的原因在于其使用了em或rem作为字体单位；</p><p>3. Firefox能够调整px和em，rem，但是96%以上的中国网民使用IE浏览器(或内核)。</p><p>&nbsp;</p><p>px像素（Pixel）。相对长度单位。像素px是相对于显示器屏幕分辨率而言的。(引自CSS2.0手册)</p><p>&nbsp;</p><p>em是相对长度单位。相对于当前对象内文本的字体尺寸。如当前对行内文本的字体尺寸未被人为设置，则相对于浏览器的默认字体尺寸。(引自CSS2.0手册)</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp; &nbsp;&nbsp; &nbsp; 任意浏览器的默认字体高都是16px。所有未经调整的浏览器都符合: 1em=16px。那么12px=0.75em,10px=0.625em。为了简化font-size的换算，需要在css中的body选择器中声明Font-size=62.5%，这就使em值变为 16px*62.5%=10px, 这样12px=1.2em, 10px=1em, 也就是说只需要将你的原来的px数值除以10，然后换上em作为单位就行了。</p><p>&nbsp;</p><p>EM特点&nbsp;</p><p>1. em的值并不是固定的；</p><p>2. em会继承父级元素的字体大小。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>所以我们在写CSS的时候，需要注意两点：</p><p>1. body选择器中声明Font-size=62.5%；</p><p>2. 将你的原来的px数值除以10，然后换上em作为单位；</p><p>3. 重新计算那些被放大的字体的em数值。避免字体大小的重复声明。</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp; &nbsp;&nbsp; &nbsp; 也就是避免1.2 * 1.2= 1.44的现象。比如说你在#content中声明了字体大小为1.2em，那么在声明p的字体大小时就只能是1em，而不是1.2em, 因为此em非彼em，它因继承#content的字体高而变为了1em=12px。</p><p>rem特点&nbsp;</p><p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;rem是<a href="http://www.html5cn.org/portal.php?mod=list&amp;catid=16" target="_blank" rel="external">CSS3</a>新增的一个相对单位（root em，根em），这个单位引起了广泛关注。这个单位与em有什么区别呢？区别在于使用rem为元素设定字体大小时，仍然是相对大小，但相对的只是HTML根元素。这个单位可谓集相对大小和绝对大小的优点于一身，通过它既可以做到只修改根元素就成比例地调整所有字体大小，又可以避免字体大小逐层复合的连锁反应。目前，除了IE8及更早版本外，所有浏览器均已支持rem。对于不支持它的浏览器，应对方法也很简单，就是多写一个绝对单位的声明。这些浏览器会忽略用rem设定的字体大小。下面就是</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>一个例子：</p><p>p&nbsp;{font-size:14px;&nbsp;font-size:.875rem;}</p><p>注意：&nbsp;</p><p>&nbsp;</p><p>&nbsp; &nbsp;&nbsp; &nbsp;&nbsp;&nbsp;选择使用什么字体单位主要由你的项目来决定，如果你的用户群都使用最新版的浏览器，那推荐使用rem，如果要考虑兼容性，那就使用px,或者两者同时使用。</p><p>&nbsp;</p><p>在这里为大家提供一个px,em,rem单位转换工具</p><p>地址：<a href="http://pxtoem.com/" target="_blank" rel="external">http://pxtoem.com/</a></p><p><img src="/uploads/2016/08/150522q9yzyyy7ngygyn5h.jpg" alt="2.jpg" title="2.jpg"></p><div id="aimg_21272_menu" class="tip tip_4 aimg_tip"><br><div class="tip_c xs0"><br><div class="y">&nbsp;</div><p></p></div><p></p><div class="tip_horn">&nbsp;</div><p></p></div><p></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;转自：<a href="http://www.cnblogs.com/leejersey/p/3662612.html" target="_blank" rel="external">http://www.cnblogs.com/leejersey/p/3662612.html</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;难怪会问我 rem 和 em， 这俩或在移动端还是很有必要学习的。 root em OK？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/uploads/2016/08/1505196wwz21kmjckgk22k.jpg&quot; alt=&quot;1.jpg&quot; title=&quot;1.jpg&quot;&gt;&lt;/p
      
    
    </summary>
    
      <category term="HTML" scheme="https://liangsandian.com/categories/html/"/>
    
    
  </entry>
  
</feed>
